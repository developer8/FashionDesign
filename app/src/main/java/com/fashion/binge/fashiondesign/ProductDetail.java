package com.fashion.binge.fashiondesign;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.graphics.Color;import android.graphics.drawable.Drawable;import android.graphics.drawable.GradientDrawable;import android.os.Bundle;import android.preference.PreferenceManager;import android.support.design.widget.CoordinatorLayout;import android.support.design.widget.Snackbar;import android.support.v4.content.ContextCompat;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.text.Html;import android.util.DisplayMetrics;import android.util.TypedValue;import android.view.Gravity;import android.view.MenuItem;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import com.bumptech.glide.Glide;import com.dd.ShadowLayout;import com.fashion.binge.fashiondesign.adapters.CaraouselViewPagerAdapter;import com.fashion.binge.fashiondesign.classes.CustomScrollView;import com.fashion.binge.fashiondesign.classes.JSONUrl;import com.fashion.binge.fashiondesign.classes.SetStatusBarColor;import com.fashion.binge.fashiondesign.classes.Utils;import com.fashion.binge.fashiondesign.interfaces.AccessTokenInfoHolder;import com.fashion.binge.fashiondesign.interfaces.AddToCartInfoHolder;import com.fashion.binge.fashiondesign.interfaces.AddToWIshListInterface;import com.fashion.binge.fashiondesign.interfaces.FollowUnfollowInfoHolder;import com.fashion.binge.fashiondesign.json.AddToCart;import com.fashion.binge.fashiondesign.json.AddToWishlist;import com.fashion.binge.fashiondesign.shared_preference.SharedPrefrenceInfo;import com.fashion.binge.fashiondesign.sweetalertdialog.SweetAlertDialog;import com.mixpanel.android.mpmetrics.MixpanelAPI;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Set;import de.hdodenhof.circleimageview.CircleImageView;public class ProductDetail extends AppCompatActivity implements ViewPager.OnPageChangeListener, View.OnClickListener {    private Toolbar toolbar;    private TextView toolbarTitle;    private TextView cartNumber, notificationNumber;    private ViewPager viewPager;    private float scale;    private String id, from,shopCountryName;    private LinearLayout  bottomContent, viewpagerParent;    private List<ColorModel> colorModelList = new ArrayList<>();    private String sellerId, sellerName, sellerBanner, sellerAvatar;    private String size = " ", color = " ";    private String maxQuantity = "1";    private CircleImageView avatarImage;    private TextView productName, productPrice, description;    private Button addToCart, addToWishList;    private LinearLayout circleViewChild;    private TextView noColorText;    private TextView noSizeText;    private TextView colorText, sizeText;    private RelativeLayout colorTextContent, sizeTextContent;    private TextView selectedTextView, selectedColorTextView;    private TextView quantity;    private LinearLayout sizesLayout, viewpagerIndicator;    private ImageView increaseQuantity, decreaseQuantity;    private ImageView cart, notification;    private ProgressBar progressBar;    private CoordinatorLayout coordinatorLayout;    private CustomScrollView customScrollView;    private ShadowLayout shadowLayout;    private FrameLayout lastSelectedFrameLayout;    String projectToken;    MixpanelAPI mixpanel;    private Boolean isProductInternational = false;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        id = getIntent().getStringExtra("id");        from = getIntent().getStringExtra("from");        shopCountryName = getIntent().getStringExtra("shop_country");        setContentView(R.layout.activity_product_detail);        initialiseLayout();        initialieListeners();        if (!Homepage.isTablet(this)) {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        }        setSupportActionBar(toolbar);        //noinspection ConstantConditions        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        SetStatusBarColor.setStausBarColor(this);        projectToken = "8fdaec76ab6e8d1bccc743cb076c3707";        mixpanel = MixpanelAPI.getInstance(ProductDetail.this,projectToken);        mixpanel.timeEvent("ProductDetailSession");        toolbarTitle.setText(R.string.product_name);        scale = this.getResources().getDisplayMetrics().density;        viewpagerParent.post(new Runnable() {            @Override            public void run() {                DisplayMetrics metrics = ProductDetail.this.getResources().getDisplayMetrics();                int height = metrics.heightPixels;                viewpagerParent.getLayoutParams().height = height - (toolbar.getHeight() + bottomContent.getHeight()  + getStatusBarHeight());                viewpagerParent.requestLayout();                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);                layoutParams.setMargins(0, 0, 0, bottomContent.getHeight() + 20);                shadowLayout.setLayoutParams(layoutParams);            }        });        getProduct(from);        /**         * Handling scrollview scroll listener to make the header sticky         */        viewPager.setOnTouchListener(new View.OnTouchListener() {            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_MOVE && customScrollView != null) {                    customScrollView.requestDisallowInterceptTouchEvent(true);                }                return false;            }        });    }    private void initialiseLayout() {        toolbar = (Toolbar) findViewById(R.id.toolbar);        toolbarTitle = (TextView) findViewById(R.id.toolbar_title);        cartNumber = (TextView) findViewById(R.id.cart_number);        notificationNumber = (TextView) findViewById(R.id.notification_number);        viewPager = (ViewPager) findViewById(R.id.view_pager);        bottomContent = (LinearLayout) findViewById(R.id.bottom_content);        viewpagerParent = (LinearLayout) findViewById(R.id.viewpager_parent);        avatarImage = (CircleImageView) findViewById(R.id.avatar_image);        productName = (TextView) findViewById(R.id.product_name);        productPrice = (TextView) findViewById(R.id.product_price);        addToCart = (Button) findViewById(R.id.add_to_cart);        addToWishList = (Button) findViewById(R.id.add_to_wishlist);        description = (TextView) findViewById(R.id.description);        circleViewChild = (LinearLayout) findViewById(R.id.circle_view_child);        noColorText = (TextView) findViewById(R.id.no_color_text);        noSizeText = (TextView) findViewById(R.id.no_size_text);        colorText = (TextView) findViewById(R.id.color_text);        colorTextContent = (RelativeLayout) findViewById(R.id.color_text_content);        sizeText = (TextView) findViewById(R.id.size_text);        sizeTextContent = (RelativeLayout) findViewById(R.id.size_text_content);        quantity = (TextView) findViewById(R.id.quantity);        sizesLayout = (LinearLayout) findViewById(R.id.sizes_layout);        increaseQuantity = (ImageView) findViewById(R.id.increase_quantity);        decreaseQuantity = (ImageView) findViewById(R.id.decrease_quantity);        cart = (ImageView) findViewById(R.id.cart);        notification = (ImageView) findViewById(R.id.notification);        progressBar = (ProgressBar) findViewById(R.id.progressBar);        coordinatorLayout = (CoordinatorLayout) findViewById(R.id.coordinator_layout);        viewpagerIndicator = (LinearLayout) findViewById(R.id.viewpager_indicator);        customScrollView = (CustomScrollView) findViewById(R.id.scrollview);        shadowLayout = (ShadowLayout) findViewById(R.id.shadow_layout);    }    private void initialieListeners() {        increaseQuantity.setOnClickListener(this);        decreaseQuantity.setOnClickListener(this);        addToCart.setOnClickListener(this);        addToWishList.setOnClickListener(this);        cart.setOnClickListener(this);        notification.setOnClickListener(this);        avatarImage.setOnClickListener(this);    }    public int getStatusBarHeight() {        int result = 0;        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");        if (resourceId > 0) {            result = getResources().getDimensionPixelSize(resourceId);        }        return result;    }    private void getProduct(final String from) {        if (!from.equals("wishlist") && (!(from.equals("product_list")) && (!(from.equals("new_product_list_page")) && (!(from.equals("cart")) && (!(from.equals("notification"))))))) {            String json = getIntent().getStringExtra("json");            getProductDetailContent(json);        } else {            SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);            final SweetAlertDialog pDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE);            pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));            pDialog.setTitleText("Getting product");            pDialog.setCancelable(true);            pDialog.show();            new com.fashion.binge.fashiondesign.json.ProductDetail(this).getProductDetail(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), id, new FollowUnfollowInfoHolder() {                @Override                public void setFollowUnfollowInfo(String success, String error) {                    if (success.equals("401")) {                        Utils.setTokenInfo(ProductDetail.this, pDialog, new AccessTokenInfoHolder() {                            @Override                            public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                pDialog.dismiss();                                getProduct(from);                            }                        });                    } else {                        if (success.equals("true")) {                            getProductDetailContent(error);                            pDialog.dismissWithAnimation();                        } else {                            pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                            pDialog.setTitleText(error);                        }                    }                }            });        }    }    private void getProductDetailContent(String data) {        try {            JSONObject jsonObject = new JSONObject(data);            List<String> images = new ArrayList<>();            List<String> sizes = new ArrayList<>();            List<String> optionValueIds = new ArrayList<>();            List<String> productOptionValueIds = new ArrayList<>();            List<String> productOptionIds = new ArrayList<>();            List<String> quantitys = new ArrayList<>();            com.fashion.binge.fashiondesign.models.ProductDetail productDetail = new com.fashion.binge.fashiondesign.models.ProductDetail();            String id = jsonObject.getString("id");            String name = jsonObject.getString("name");            String image = jsonObject.getString("image");            String price = jsonObject.getString("price");            String description = jsonObject.getString("description");            String wishlist = jsonObject.getString("wishlist");            String internationShipping = jsonObject.getString("international_shipping");            sellerAvatar = jsonObject.getString("seller_avatar");            sellerId = jsonObject.getString("seller_id");            sellerBanner = jsonObject.getString("seller_banner");            sellerName = jsonObject.getString("seller_name");            if (internationShipping.equals("0")){                isProductInternational = false;            }            else if (internationShipping.equals("1")){                isProductInternational = true;            }            try {                Glide.with(this)                        .load(JSONUrl.IMAGE_BASE_URL + sellerAvatar)                        .into(avatarImage);            } catch (Exception ex) {                ex.printStackTrace();            }            this.maxQuantity = jsonObject.getString("quantity");            //set total quantity to the quantity textview            JSONArray imagesArray = jsonObject.getJSONArray("images");            for (int j = 0; j < imagesArray.length(); j++) {                images.add(imagesArray.get(j).toString());            }            JSONArray sizeArray = jsonObject.getJSONArray("options");            for (int k = 0; k < sizeArray.length(); k++) {                JSONObject sizeJsonObject = sizeArray.getJSONObject(k);                String optionsName = sizeJsonObject.getString("name");                if (optionsName.equals("Size")) {                    String productOptionId = sizeJsonObject.getString("product_option_id");                    JSONArray optionValueArray = sizeJsonObject.getJSONArray("option_value");                    for (int l = 0; l < optionValueArray.length(); l++) {                        JSONObject optionValueObject = optionValueArray.getJSONObject(l);                        String size = optionValueObject.getString("name");                        String optionValueId = optionValueObject.getString("option_value_id");                        String productOptionValueId = optionValueObject.getString("product_option_value_id");                        String quantity = optionValueObject.getString("quantity");                        optionValueIds.add(optionValueId);                        productOptionValueIds.add(productOptionValueId);                        sizes.add(size);                        quantitys.add(quantity);                        productOptionIds.add(productOptionId);                    }                } else if (optionsName.equals("Color")) {                    String productOptionId = sizeJsonObject.getString("product_option_id");                    JSONArray colorValueArray = sizeJsonObject.getJSONArray("option_value");                    for (int m = 0; m < colorValueArray.length(); m++) {                        ColorModel colorModel = new ColorModel();                        List<String> colorParentId = new ArrayList<>();                        JSONObject colorValueObject = colorValueArray.getJSONObject(m);                        String colorImage = colorValueObject.getString("image");                        String colorName = colorValueObject.getString("name");                        String quantity = colorValueObject.getString("quantity");                        String productOptionValueId = colorValueObject.getString("product_option_value_id");                        JSONArray parentIdArray = colorValueObject.getJSONArray("parent_id");                        for (int n = 0; n < parentIdArray.length(); n++) {                            colorParentId.add(parentIdArray.getString(n));                        }                        colorModel.setImage(colorImage);                        colorModel.setColorName(colorName);                        colorModel.setParentId(colorParentId);                        colorModel.setProductOptionId(productOptionId);                        colorModel.setProductOptionValueId(productOptionValueId);                        colorModel.setQuantity(quantity);                        colorModelList.add(colorModel);                    }                }            }            productDetail.setId(id);            productDetail.setName(name);            productDetail.setWishList(wishlist);            productDetail.setProductImage(image);            productDetail.setProductSubImage(images);            productDetail.setPrice(price);            productDetail.setDescription(description);            productDetail.setSize(sizes);            productDetail.setQuantity(quantitys);            productDetail.setOptionValueId(optionValueIds);            productDetail.setProductOptionValueId(productOptionValueIds);            productDetail.setProductOptionId(productOptionIds);            setContent(productDetail);        } catch (JSONException e) {            e.printStackTrace();        }    }    private void setContent(com.fashion.binge.fashiondesign.models.ProductDetail productDetail) {        prepareFancyCoverFlow(productDetail.getProductSubImage());        toolbarTitle.setText(String.format("%s", productDetail.getName()));        prepareSizeText(productDetail.getQuantity(), productDetail.getSize(), productDetail.getOptionValueId(), productDetail.getProductOptionId(), productDetail.getProductOptionValueId());        productName.setText(productDetail.getName());        productPrice.setText(productDetail.getPrice());        if (productDetail.getWishList().equals("1")) {            addToWishList.setText(R.string.in_wishlist);        }        //noinspection deprecation        description.setText(Html.fromHtml(productDetail.getDescription()));        if (productDetail.getSize().size() == 0 && colorModelList.size() > 0) {            noColorText.setText("");            List<String> colorImageList = new ArrayList<>();            List<String> colorNameList = new ArrayList<>();            List<String> productOptionIdList = new ArrayList<>();            List<String> productOptionValueIdList = new ArrayList<>();            List<String> quantityList = new ArrayList<>();            for (int i = 0; i < colorModelList.size(); i++) {                ColorModel colorModel = colorModelList.get(i);                String colorImage = colorModel.getImage();                String colorName = colorModel.getColorName();                String productOptionId = colorModel.getProductOptionId();                String productOptionValueId = colorModel.getProductOptionValueId();                String quantity = colorModel.getQuantity();                colorImageList.add(colorImage);                colorNameList.add(colorName);                productOptionIdList.add(productOptionId);                productOptionValueIdList.add(productOptionValueId);                quantityList.add(quantity);            }            prepareColorImage(colorImageList, colorNameList, productOptionIdList, productOptionValueIdList, quantityList);        } else if (noSizeText.getText().equals("Size not available") && noSizeText.getVisibility() == View.VISIBLE) {            noColorText.setText(R.string.color_not_available);        } else {            noColorText.setText(R.string.select_size);        }        if (colorModelList.size() == 0) {            colorText.setVisibility(View.GONE);            colorTextContent.setVisibility(View.GONE);        }    }    private void prepareColorImage(List<String> color, List<String> name, List<String> productOptionId, List<String> productOptionValueId, List<String> quantity) {        circleViewChild.removeAllViews();        circleViewChild.requestLayout();        circleViewChild.invalidate();        for (int i = 0; i < color.size(); i++) {            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(                    60, 60);            final FrameLayout frameLayout = new FrameLayout(this);            layoutParams.setMargins(10, 0, 10, 0);            frameLayout.setPadding(10, 10, 10, 10);            frameLayout.setLayoutParams(layoutParams);            final CircleImageView circleImageView = new CircleImageView(this);            circleImageView.setScaleType(CircleImageView.ScaleType.CENTER_CROP);            circleImageView.setBorderColor(Color.LTGRAY);            circleImageView.setBorderWidth(1);            Glide.with(this)                    .load(color.get(i))                    .into(circleImageView);            frameLayout.setTag(quantity.get(i));            final TextView selectedTextView = new TextView(this);            selectedTextView.setTag(name.get(i));            selectedTextView.setTag(R.id.product_options_id, productOptionId.get(i));            selectedTextView.setTag(R.id.product_option_value_id, productOptionValueId.get(i));            selectedTextView.setBackground(ContextCompat.getDrawable(this, R.drawable.circletextview));            GradientDrawable selectedShapeDrawable = (GradientDrawable) selectedTextView.getBackground();            selectedShapeDrawable.setColor(ContextCompat.getColor(this, android.R.color.transparent));            selectedShapeDrawable.setStroke(0, ContextCompat.getColor(this, android.R.color.transparent));            FrameLayout.LayoutParams rp = new FrameLayout.LayoutParams(20, 20);            rp.setMargins(50, 50, 0, 0);            selectedTextView.setGravity(Gravity.CENTER);            selectedTextView.setVisibility(View.INVISIBLE);            selectedTextView.setId(R.id.automatic);            selectedTextView.setLayoutParams(rp);            ((FrameLayout.LayoutParams) selectedTextView.getLayoutParams()).gravity = Gravity.BOTTOM | Gravity.END;            frameLayout.addView(circleImageView);            frameLayout.addView(selectedTextView);            circleViewChild.addView(frameLayout);            frameLayout.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    //set the selected size number of product is the max quantity available                    ProductDetail.this.quantity.setText("1");                    ProductDetail.this.maxQuantity = frameLayout.getTag().toString();                    if (selectedTextView.getVisibility() == View.INVISIBLE) {                        if (selectedColorTextView != null) {                            selectedColorTextView.setVisibility(View.INVISIBLE);                            lastSelectedFrameLayout.setBackgroundResource(0);                        }                        selectedTextView.setVisibility(View.VISIBLE);                        frameLayout.setBackground(ContextCompat.getDrawable(ProductDetail.this, R.drawable.rounded_color_border));                        ProductDetail.this.color = selectedTextView.getTag(R.id.product_options_id) + ":" + selectedTextView.getTag(R.id.product_option_value_id);                        selectedColorTextView = selectedTextView;                        lastSelectedFrameLayout = frameLayout;                    } else {                        ProductDetail.this.color = " ";                        selectedTextView.setVisibility(View.INVISIBLE);                        frameLayout.setBackgroundResource(0);                    }                }            });        }    }    private void prepareSizeText(List<String> quantity, List<String> size, List<String> optionValueId, List<String> productOptionId, List<String> productOptionValueId) {        if (size.size() < 1) {            noSizeText.setVisibility(View.VISIBLE);            sizeText.setVisibility(View.GONE);            sizeTextContent.setVisibility(View.GONE);            return;        }        for (int i = 0; i < size.size(); i++) {            LinearLayout.LayoutParams layoutParams;            final TextView circleTextView = new TextView(this);            if (size.get(i).length() == 1) {                int textHeight = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,32, getResources().getDisplayMetrics());                layoutParams = new LinearLayout.LayoutParams(textHeight,textHeight);                layoutParams.setMargins(10, 10, 10, 10);            } else {                layoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);                layoutParams.setMargins(10, 10, 10, 10);                circleTextView.setPadding(40, 10, 40, 10);            }            circleTextView.setLayoutParams(layoutParams);            circleTextView.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_long_size_border));            /**             * make the drawable have border             */            GradientDrawable gradientDrawable = (GradientDrawable) circleTextView.getBackground();            gradientDrawable.setColor(ContextCompat.getColor(this, android.R.color.transparent));            gradientDrawable.setStroke(2, ContextCompat.getColor(this, R.color.colorPrimaryDark));            circleTextView.setText(size.get(i));            circleTextView.setTag(R.id.size_name, size.get(i));            circleTextView.setTag(R.id.size_option_value_id, optionValueId.get(i));            circleTextView.setTag(R.id.product_options_id, productOptionId.get(i));            circleTextView.setTag(R.id.product_option_value_id, productOptionValueId.get(i));            circleTextView.setTag(R.id.quantity, quantity.get(i));            circleTextView.setId(0);            circleTextView.setGravity(Gravity.CENTER);            circleTextView.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    noColorText.setVisibility(View.INVISIBLE);                    setBackground(circleTextView, circleTextView.getTag(R.id.quantity).toString(), circleTextView.getTag(R.id.size_option_value_id).toString(), circleTextView.getTag(R.id.product_options_id).toString() + ":" + circleTextView.getTag(R.id.product_option_value_id).toString());                }            });            sizesLayout.addView(circleTextView);        }    }    private void setBackground(View view, String sizeQuantity, String optionValueId, String tag) {        TextView textView = (TextView) view;        if (textView.getId() == 0) {            if (selectedTextView != null) {                selectedTextView.setTextColor(Color.parseColor("#67757f"));                selectedTextView.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_long_size_border));                GradientDrawable shapeDrawable = (GradientDrawable) selectedTextView.getBackground();                shapeDrawable.setColor(ContextCompat.getColor(ProductDetail.this, android.R.color.transparent));                shapeDrawable.setStroke(2, ContextCompat.getColor(this, R.color.colorPrimaryDark));                selectedTextView.setId(0);                //setting size to null if unselected                this.size = " ";            }            //set the selected size number of product is the max quantity available            ProductDetail.this.quantity.setText("1");            this.maxQuantity = sizeQuantity;            this.size = tag;            textView.setTextColor(Color.WHITE);            view.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_long_size_border));            GradientDrawable shapeDrawable = (GradientDrawable) view.getBackground();            shapeDrawable.setColor(ContextCompat.getColor(ProductDetail.this, R.color.colorPrimary));            shapeDrawable.setStroke(2, ContextCompat.getColor(this, R.color.colorPrimary));            textView.setId(-1);            selectedTextView = textView;            List<String> colorImageList = new ArrayList<>();            List<String> colorNameList = new ArrayList<>();            List<String> productOptionIdList = new ArrayList<>();            List<String> productOptionValueIdList = new ArrayList<>();            List<String> quantityList = new ArrayList<>();            if (colorModelList.size() > 0) {                for (int i = 0; i < colorModelList.size(); i++) {                    ColorModel colorModel = colorModelList.get(i);                    for (int j = 0; j < colorModel.getParentId().size(); j++) {                        String parentId = colorModel.getParentId().get(j);                        if (optionValueId.equals(parentId)) {                            String colorImage = colorModel.getImage();                            String colorName = colorModel.getColorName();                            String productOptionId = colorModel.getProductOptionId();                            String productOptionValueId = colorModel.getProductOptionValueId();                            String quantity = colorModel.getQuantity();                            colorImageList.add(colorImage);                            colorNameList.add(colorName);                            productOptionIdList.add(productOptionId);                            productOptionValueIdList.add(productOptionValueId);                            quantityList.add(quantity);                        }                    }                }                prepareColorImage(colorImageList, colorNameList, productOptionIdList, productOptionValueIdList, quantityList);            } else {                noColorText.setVisibility(View.VISIBLE);                noColorText.setText(R.string.color_not_available);            }        } else {            this.size = " ";            textView.setTextColor(Color.parseColor("#67757f"));            GradientDrawable shapeDrawable = (GradientDrawable) textView.getBackground();            shapeDrawable.setColor(ContextCompat.getColor(ProductDetail.this, android.R.color.transparent));            shapeDrawable.setStroke(2, ContextCompat.getColor(this, R.color.colorPrimaryDark));            textView.setId(0);        }    }    private void prepareFancyCoverFlow(List<String> images) {        viewPager = (ViewPager) findViewById(R.id.view_pager);        viewPager.post(new Runnable() {            @Override            public void run() {                viewPager.setClipToPadding(false);                if (Homepage.isTablet(ProductDetail.this)) {                    int padding_in_dp = 60;  // 6 dps                    int padding_in_px = (int) (padding_in_dp * scale + 0.5f);                    viewPager.setPadding(padding_in_px, 10, padding_in_px, 0);                    int selectedPixels = (int) (17 * scale + 0.5f);                    viewPager.setPageMargin(-selectedPixels);                } else {                    //replace with 90 instead not worked by this                    int padding_in_dp = 45;  // 6 dps                    int padding_in_px = (int) (padding_in_dp * scale + 0.5f);                    viewPager.setPadding(padding_in_px, 10, padding_in_px, 0);                    int selectedPixels = (int) (17 * scale + 0.5f);                    viewPager.setPageMargin(-selectedPixels);                }                viewPager.setOffscreenPageLimit(3);                viewPager.addOnPageChangeListener(ProductDetail.this);            }        });        CaraouselViewPagerAdapter caraouselViewPagerAdapter = new CaraouselViewPagerAdapter(ProductDetail.this, images);        viewPager.setOffscreenPageLimit(2);        viewPager.setAdapter(caraouselViewPagerAdapter);        /**         * creating view pager indicator         */        prepareViewPagerIndicator(images.size());    }    private void prepareViewPagerIndicator(int size) {        viewpagerIndicator.removeAllViews();        for (int i = 0; i < size; i++) {            TextView textView = new TextView(this);            LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(20, 20);            lp.setMargins(6, 0, 6, 0);            textView.setLayoutParams(lp);            textView.setBackgroundResource(R.drawable.red_button_background);            viewpagerIndicator.addView(textView);            if (i == 0) {                GradientDrawable gradientDrawable = (GradientDrawable) textView.getBackground();                gradientDrawable.setColor(ContextCompat.getColor(ProductDetail.this, R.color.colorPrimary));            } else {                GradientDrawable gradientDrawable = (GradientDrawable) textView.getBackground();                gradientDrawable.setColor(ContextCompat.getColor(ProductDetail.this, R.color.grey_color));            }        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == android.R.id.home) {            finish();            return true;        }        return super.onOptionsItemSelected(item);    }    @Override    protected void onPause(){        super.onPause();        if (appClose()){            mixpanel.track("ProductDetailSession");        }    }    public boolean appClose(){        return true;    }    @Override    protected void onPostResume() {        super.onPostResume();        mixpanel.timeEvent("ProductDetailSession");        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);        cartNumber.setText(sharedPreferences.getString(SharedPrefrenceInfo.CART_COUNT, "0"));        if (cartNumber.getText().toString().equals("0")) {            cartNumber.setVisibility(View.GONE);        } else {            cartNumber.setVisibility(View.VISIBLE);        }        Set<String> id = sharedPreferences.getStringSet(SharedPrefrenceInfo.IDSET, new HashSet<String>());        int size = id.size();        int count = Integer.parseInt(sharedPreferences.getString(SharedPrefrenceInfo.NOTIFICATION_COUNT, "0"));        if ((count - size) > 0) {            notificationNumber.setVisibility(View.VISIBLE);            notificationNumber.setText(String.valueOf(count - size));        } else {            notificationNumber.setVisibility(View.GONE);        }    }    @Override    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        for (int i = 0; i < viewPager.getChildCount(); i++) {            View cardView = viewPager.getChildAt(i);            int itemPosition = (Integer) cardView.getTag();            if (itemPosition == position) {                float MAX_SCALE = 1f;                cardView.setScaleX(MAX_SCALE - positionOffset / 7f);                cardView.setScaleY(MAX_SCALE - positionOffset / 7f);            }            if (itemPosition == (position + 1)) {                float MIN_SCALE = 1f - 1f / 7f;                cardView.setScaleX(MIN_SCALE + positionOffset / 7f);                cardView.setScaleY(MIN_SCALE + positionOffset / 7f);            }        }    }    @Override    public void onPageSelected(int position) {        for (int i = 0; i < viewpagerIndicator.getChildCount(); i++) {            TextView textView = (TextView) viewpagerIndicator.getChildAt(i);            if (textView != null) {                Drawable background = textView.getBackground();                if (background instanceof GradientDrawable) {                    if (i == position) {                        GradientDrawable gradientDrawable = (GradientDrawable) background;                        gradientDrawable.setColor(ContextCompat.getColor(ProductDetail.this, R.color.colorPrimary));                    } else {                        GradientDrawable gradientDrawable = (GradientDrawable) background;                        gradientDrawable.setColor(ContextCompat.getColor(ProductDetail.this, R.color.grey_color));                    }                }            }        }    }    @Override    public void onPageScrollStateChanged(int state) {    }    @Override    public void onClick(View view) {        int id = view.getId();        int inc = Integer.parseInt(quantity.getText().toString());        switch (id) {            case R.id.increase_quantity:                increaseQuantity(inc);                break;            case R.id.decrease_quantity:                decreaseQuantity(inc);                break;            case R.id.add_to_cart:                mixpanel.track("ProductDetailPageAddedtoCart", null);                addToCart();                break;            case R.id.add_to_wishlist:                mixpanel.track("ProductDetailPageAddedToWishlist", null);                addToWishList();                break;            case R.id.cart:                Intent cartintent = new Intent(ProductDetail.this, Cart.class);                startActivity(cartintent);                break;            case R.id.notification:                Intent notificationIntent = new Intent(this, Notification.class);                startActivity(notificationIntent);                break;            case R.id.avatar_image:                if (!from.equals("wishlist") && (!(from.equals("product_list")) && (!(from.equals("new_product_list_page")) && (!(from.equals("cart")) && (!(from.equals("notification"))))))) {                finish();            }else{                Intent shopPageIntent = new Intent(ProductDetail.this, ShopPageContent.class);                shopPageIntent.putExtra("shop_banner", sellerBanner);                shopPageIntent.putExtra("avatar", sellerAvatar);                shopPageIntent.putExtra("id", sellerId);                shopPageIntent.putExtra("seller_name", sellerName);                shopPageIntent.putExtra("following_text", "FOLLOW");                startActivity(shopPageIntent);            }            break;        }    }    private void addToCart() {        String localeCountry = this.getResources().getConfiguration().locale.getDisplayCountry();        if (shopCountryName.equals(localeCountry) || isProductInternational){            if (this.noSizeText.getVisibility() != View.VISIBLE && this.size.equals(" ")) {                SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);                sweetAlertDialog.setTitleText("Please select size");                sweetAlertDialog.show();            } else if (this.noColorText.getVisibility() != View.VISIBLE && this.color.equals(" ")) {                SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);                sweetAlertDialog.setTitleText("Please select color");                sweetAlertDialog.show();            } else if (colorModelList.size() > 0 && this.color.equals(" ")) {                SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);                sweetAlertDialog.setTitleText("Please select color");                sweetAlertDialog.show();            } else {                final SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE);                sweetAlertDialog.setTitle("Adding to cart");                sweetAlertDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));                sweetAlertDialog.show();                final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);                String size[] = this.size.split(":");                String color[] = this.color.split(":");                String productId = this.id;                String quantity = this.quantity.getText().toString();                //encoding json to send to the server                JSONObject jsonObject = new JSONObject();                try {                    jsonObject.put("product_id", productId);                    jsonObject.put("quantity", quantity);                    JSONObject option = new JSONObject();                    if (this.size.contains(":")) {                        option.put(size[0], size[1]);                    }                    if (this.color.contains(":")) {                        option.put(color[0], color[1]);                    }                    jsonObject.put("option", option);                    new AddToCart(this).addToCart(sweetAlertDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), jsonObject, new AddToCartInfoHolder() {                        @Override                        public void cartResponse(String status, String cartCount) {                            if (status.equals("401")) {                                sweetAlertDialog.dismiss();                                Utils.setTokenInfo(ProductDetail.this, sweetAlertDialog, new AccessTokenInfoHolder() {                                    @Override                                    public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                        addToCart();                                    }                                });                            } else {                                if (status.equals("Successfully added to cart")) {                                    SharedPreferences.Editor editor = sharedPreferences.edit();                                    editor.putString(SharedPrefrenceInfo.CART_COUNT, cartCount);                                    editor.apply();                                    cartNumber.setVisibility(View.VISIBLE);                                    cartNumber.setText(cartCount);                                    sweetAlertDialog.setTitleText(status);                                    sweetAlertDialog.changeAlertType(SweetAlertDialog.SUCCESS_TYPE);                                } else {                                    sweetAlertDialog.setTitleText(status);                                    sweetAlertDialog.changeAlertType(SweetAlertDialog.ERROR_TYPE);                                }                            }                        }                    });                } catch (JSONException e) {                    e.printStackTrace();                }            }        }        else if (!(shopCountryName.equals(localeCountry)) || !isProductInternational){            SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);            sweetAlertDialog.setTitleText("Product not available in your country");            sweetAlertDialog.show();        }        else {            SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);            sweetAlertDialog.setTitleText("Product not available");            sweetAlertDialog.show();        }    }    private void increaseQuantity(int inc) {        SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);        if (this.noSizeText.getVisibility() != View.VISIBLE && this.size.equals(" ")) {            sweetAlertDialog.setTitleText("Please select size");            sweetAlertDialog.show();        } else if (this.noColorText.getVisibility() != View.VISIBLE && this.color.equals(" ")) {            sweetAlertDialog.setTitleText("Please select color");            sweetAlertDialog.show();        } else {            if (maxQuantity != null) {                if (inc < Integer.parseInt(maxQuantity)) {                    quantity.setText(String.valueOf(inc + 1));                } else {                    sweetAlertDialog.setTitleText("Quantity exceed limit");                    sweetAlertDialog.show();                }            }        }    }    private void decreaseQuantity(int inc) {        if (inc > 1) {            quantity.setText(String.valueOf(inc - 1));        } else {            Animation animation = AnimationUtils.loadAnimation(this, R.anim.shake_animation);            decreaseQuantity.startAnimation(animation);        }    }    private void addToWishList() {        progressBar.setVisibility(View.VISIBLE);        final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);        new AddToWishlist(this).addToWishList(sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), this.id, new AddToWIshListInterface() {            @Override            public void addToWishList(String result) {                if (result.equals("401")) {                    final SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(ProductDetail.this, SweetAlertDialog.PROGRESS_TYPE);                    sweetAlertDialog.setTitleText("Adding to wishlist");                    sweetAlertDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));                    sweetAlertDialog.show();                    Utils.setTokenInfo(ProductDetail.this, sweetAlertDialog, new AccessTokenInfoHolder() {                        @Override                        public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                            sweetAlertDialog.dismissWithAnimation();                            ProductDetail.this.addToWishList();                        }                    });                } else {                    if (result.equals("Successfully added to wishlist")) {                        addToWishList.setText(R.string.in_wishlist);                    }                    Snackbar snackbar = Snackbar.make(coordinatorLayout, result, Snackbar.LENGTH_SHORT);                    View view = snackbar.getView();                    view.setBackgroundColor(Color.parseColor("#f66d63"));                    snackbar.show();                    progressBar.setVisibility(View.INVISIBLE);                }            }        });    }    class ColorModel {        private String colorName;        private String image;        private List<String> parentId;        private String productOptionId;        private String productOptionValueId;        private String quantity;        public String getQuantity() {            return quantity;        }        public void setQuantity(String quantity) {            this.quantity = quantity;        }        public String getProductOptionId() {            return productOptionId;        }        public void setProductOptionId(String productOptionId) {            this.productOptionId = productOptionId;        }        public String getProductOptionValueId() {            return productOptionValueId;        }        public void setProductOptionValueId(String productOptionValueId) {            this.productOptionValueId = productOptionValueId;        }        public String getColorName() {            return colorName;        }        public void setColorName(String colorName) {            this.colorName = colorName;        }        public String getImage() {            return image;        }        public void setImage(String image) {            this.image = image;        }        public List<String> getParentId() {            return parentId;        }        public void setParentId(List<String> parentId) {            this.parentId = parentId;        }    }}