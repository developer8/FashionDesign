package com.fashion.binge.fashiondesign;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.graphics.Color;import android.net.Uri;import android.os.Bundle;import android.preference.PreferenceManager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.CardView;import android.support.v7.widget.Toolbar;import android.text.Html;import android.view.MenuItem;import android.view.MotionEvent;import android.view.View;import android.view.animation.Animation;import android.view.animation.TranslateAnimation;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import com.fashion.binge.fashiondesign.classes.JSONUrl;import com.fashion.binge.fashiondesign.classes.SetStatusBarColor;import com.fashion.binge.fashiondesign.interfaces.JsonResponseHolder;import com.fashion.binge.fashiondesign.json.AboutUs;import com.fashion.binge.fashiondesign.json.PrivacyPolicy;import com.fashion.binge.fashiondesign.json.TermsAndCondition;import com.fashion.binge.fashiondesign.shared_preference.SharedPrefrenceInfo;import com.fashion.binge.fashiondesign.sweetalertdialog.SweetAlertDialog;import org.json.JSONException;import org.json.JSONObject;public class SettingActivity extends AppCompatActivity implements View.OnClickListener {    private Toolbar toolbar;    private TextView toolbarTitle, version;    private TextView privacyPolicy, aboutUs, termsAndConditions;    private LinearLayout topParent;    private CardView parent, feedbacks, name, email;    private EditText nameText, emailText, feedbackText;    private TextView description, cartNumber, notificationNumber;    private ImageView cart, notification;    private Button sendUsFeedback, sendNow;    private ScrollView scrollView;    private ImageView wishlist;    private TextView share;    private int count = 0;    private long startMillis = 0;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_setting);        if (!Homepage.isTablet(this)) {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        }        initialiseLayout();        initialiseListeners();        setSupportActionBar(toolbar);        //noinspection ConstantConditions        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        SetStatusBarColor.setStausBarColor(this);        toolbarTitle.setText(R.string.setting);        parent.post(new Runnable() {            @Override            public void run() {                parent.getLayoutParams().height = topParent.getHeight();            }        });        String versionName = BuildConfig.VERSION_NAME;        version.setText(String.format("Version %s", versionName));        countTap();        cart.setVisibility(View.GONE);        cartNumber.setVisibility(View.GONE);        notification.setVisibility(View.GONE);        notificationNumber.setVisibility(View.GONE);    }    private void countTap() {        version.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View view, MotionEvent motionEvent) {                int eventaction = motionEvent.getAction();                if (eventaction == MotionEvent.ACTION_DOWN) {                    //get system current milliseconds                    long time = System.currentTimeMillis();                    //if it is the first time, or if it has been more than 3 seconds since the first tap ( so it is like a new try), we reset everything                    if (startMillis == 0 || (time - startMillis > 3000)) {                        startMillis = time;                        count = 1;                    }                    //it is not the first, and it has been  less than 3 seconds since the first                    else { //  time-startMillis< 3000                        count++;                    }                    if (count == 5) {                        JSONUrl.BASE_URL = "http://bingethat.com/index.php?";                        JSONUrl.IMAGE_BASE_URL="http://bingethat.com/image/";                        SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(SettingActivity.this);                        SharedPreferences.Editor editor=sharedPreferences.edit();                        editor.putString(SharedPrefrenceInfo.IS_USER_LOGGED_IN,"false");                        editor.apply();                        Intent intent = new Intent(SettingActivity.this, Homepage.class);                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                        startActivity(intent);                    }                    return true;                }                return false;            }        });    }    private void initialiseLayout() {        toolbar = (Toolbar) findViewById(R.id.toolbar);        toolbarTitle = (TextView) findViewById(R.id.toolbar_title);        privacyPolicy = (TextView) findViewById(R.id.privacy_policy);        parent = (CardView) findViewById(R.id.parent);        description = (TextView) findViewById(R.id.description);        topParent = (LinearLayout) findViewById(R.id.top_parent);        aboutUs = (TextView) findViewById(R.id.about_us);        cart = (ImageView) findViewById(R.id.cart);        termsAndConditions = (TextView) findViewById(R.id.terms_and_conditions);        version = (TextView) findViewById(R.id.version);        feedbacks = (CardView) findViewById(R.id.feedbacks);        sendUsFeedback = (Button) findViewById(R.id.send_us_feedback);        scrollView = (ScrollView) findViewById(R.id.scrollview);        name = (CardView) findViewById(R.id.name);        email = (CardView) findViewById(R.id.email);        sendNow = (Button) findViewById(R.id.send_now);        nameText = (EditText) findViewById(R.id.nameText);        emailText = (EditText) findViewById(R.id.emailText);        feedbackText = (EditText) findViewById(R.id.feedbackText);        cartNumber = (TextView) findViewById(R.id.cart_number);        notification = (ImageView) findViewById(R.id.notification);        notificationNumber = (TextView) findViewById(R.id.notification_number);        wishlist = (ImageView) findViewById(R.id.wishlist);        share = (TextView) findViewById(R.id.share);    }    private void initialiseListeners() {        privacyPolicy.setOnClickListener(this);        aboutUs.setOnClickListener(this);        cart.setOnClickListener(this);        sendUsFeedback.setOnClickListener(this);        termsAndConditions.setOnClickListener(this);        sendNow.setOnClickListener(this);        wishlist.setOnClickListener(this);        share.setOnClickListener(this);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == android.R.id.home) {            if (parent.getVisibility() == View.VISIBLE) {                hideSignUpAnimationView();            } else {                finish();            }            return true;        }        return super.onOptionsItemSelected(item);    }    @Override    public void onClick(View v) {        int id = v.getId();        final SweetAlertDialog pDialog = new SweetAlertDialog(SettingActivity.this, SweetAlertDialog.PROGRESS_TYPE);        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(SettingActivity.this);        pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));        pDialog.setTitleText("Getting content");        pDialog.setCancelable(true);        pDialog.show();        switch (id) {            case R.id.privacy_policy:                new PrivacyPolicy(SettingActivity.this).getPrivacyPolicyContent(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {                    @Override                    public void onResponse(String success, String data) {                        try {                            JSONObject jsonObject = new JSONObject(data);                            final String description = jsonObject.getString("description");                            pDialog.dismissWithAnimation();                            pDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {                                @Override                                public void onDismiss(DialogInterface dialog) {                                    parent.setVisibility(View.VISIBLE);                                    translateContentAnimationView();                                    //noinspection deprecation                                    SettingActivity.this.description.setText(Html.fromHtml(description));                                    scrollView.setVisibility(View.VISIBLE);                                    name.setVisibility(View.GONE);                                    email.setVisibility(View.GONE);                                    feedbacks.setVisibility(View.GONE);                                    sendNow.setVisibility(View.GONE);                                }                            });                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                });                break;            case R.id.terms_and_conditions:                new TermsAndCondition(SettingActivity.this).getTermsAndConditionsContent(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {                    @Override                    public void onResponse(String success, String data) {                        try {                            JSONObject jsonObject = new JSONObject(data);                            final String description = jsonObject.getString("description");                            pDialog.dismissWithAnimation();                            pDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {                                @Override                                public void onDismiss(DialogInterface dialog) {                                    parent.setVisibility(View.VISIBLE);                                    translateContentAnimationView();                                    //noinspection deprecation                                    SettingActivity.this.description.setText(Html.fromHtml(description));                                    scrollView.setVisibility(View.VISIBLE);                                    name.setVisibility(View.GONE);                                    email.setVisibility(View.GONE);                                    feedbacks.setVisibility(View.GONE);                                    sendNow.setVisibility(View.GONE);                                }                            });                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                });                break;            case R.id.send_us_feedback:                pDialog.dismiss();                translateContentAnimationView();                parent.setVisibility(View.VISIBLE);                scrollView.setVisibility(View.GONE);                name.setVisibility(View.VISIBLE);                email.setVisibility(View.VISIBLE);                feedbacks.setVisibility(View.VISIBLE);                sendNow.setVisibility(View.VISIBLE);                break;            case R.id.about_us:                new AboutUs(SettingActivity.this).getAboutUsContent(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {                    @Override                    public void onResponse(String success, String data) {                        try {                            JSONObject jsonObject = new JSONObject(data);                            final String description = jsonObject.getString("description");                            pDialog.dismissWithAnimation();                            pDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {                                @Override                                public void onDismiss(DialogInterface dialog) {                                    parent.setVisibility(View.VISIBLE);                                    translateContentAnimationView();                                    //noinspection deprecation                                    SettingActivity.this.description.setText(Html.fromHtml(description));                                    scrollView.setVisibility(View.VISIBLE);                                    name.setVisibility(View.GONE);                                    email.setVisibility(View.GONE);                                    feedbacks.setVisibility(View.GONE);                                    sendNow.setVisibility(View.GONE);                                }                            });                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                });                break;            case R.id.cart:                pDialog.dismiss();                Intent intent = new Intent(SettingActivity.this, Cart.class);                startActivity(intent);                break;            case R.id.send_now:                pDialog.dismiss();                if (nameText.getText().toString().equals("") || emailText.getText().toString().equals("") || feedbackText.getText().toString().equals("")) {                    Toast.makeText(SettingActivity.this, "All fields are mandatory", Toast.LENGTH_LONG).show();                } else {                    Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(                            "mailto", "support@binge.sg", null));                    emailIntent.putExtra(Intent.EXTRA_SUBJECT, nameText.getText().toString());                    emailIntent.putExtra(Intent.EXTRA_TEXT, feedbackText.getText().toString());                    emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                    startActivity(Intent.createChooser(emailIntent, "Send email..."));                }                break;            case R.id.wishlist:                pDialog.dismiss();                shareData();                break;            case R.id.share:                pDialog.dismiss();                shareData();                break;        }    }    private void shareData() {        Intent share = new Intent(android.content.Intent.ACTION_SEND);        share.setType("text/plain");        share.putExtra(Intent.EXTRA_SUBJECT, "binge");        share.putExtra(Intent.EXTRA_TEXT, "https://www.binge.sg");        startActivity(Intent.createChooser(share, "Share binge!"));    }    private void translateContentAnimationView() {        TranslateAnimation anim = new TranslateAnimation(0, 0, 700, 0);        anim.setDuration(400);        anim.setFillAfter(true);        parent.startAnimation(anim);        anim.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {                parent.setVisibility(View.VISIBLE);            }            @Override            public void onAnimationEnd(Animation animation) {                parent.clearAnimation();            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });    }    private void hideSignUpAnimationView() {        TranslateAnimation anim = new TranslateAnimation(0, 0, 0, 1900);        anim.setDuration(400);        anim.setFillAfter(true);        parent.startAnimation(anim);        anim.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                parent.setVisibility(View.GONE);                parent.clearAnimation();            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });    }    @Override    public void onBackPressed() {        if (parent.getVisibility() == View.VISIBLE) {            hideSignUpAnimationView();        } else {            super.onBackPressed();        }    }}