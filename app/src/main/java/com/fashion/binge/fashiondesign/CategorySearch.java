package com.fashion.binge.fashiondesign;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.os.Bundle;import android.os.Handler;import android.preference.PreferenceManager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.view.MenuItem;import android.view.View;import android.view.animation.Animation;import android.view.animation.TranslateAnimation;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.fashion.binge.fashiondesign.adapters.LevelTwoCategoryRecyclerAdapter;import com.fashion.binge.fashiondesign.adapters.LevelTwoColorRecyclerAdapter;import com.fashion.binge.fashiondesign.adapters.LevelTwoSizeRecyclerAdapter;import com.fashion.binge.fashiondesign.classes.AlertDIalogMessage;import com.fashion.binge.fashiondesign.classes.JSONUrl;import com.fashion.binge.fashiondesign.classes.LevelTwoCategoryItemDecoration;import com.fashion.binge.fashiondesign.classes.SetStatusBarColor;import com.fashion.binge.fashiondesign.classes.Utils;import com.fashion.binge.fashiondesign.interfaces.AccessTokenInfoHolder;import com.fashion.binge.fashiondesign.interfaces.GetProductByShopInterface;import com.fashion.binge.fashiondesign.interfaces.JsonResponseHolder;import com.fashion.binge.fashiondesign.interfaces.ResponseInfoHolder;import com.fashion.binge.fashiondesign.json.Category;import com.fashion.binge.fashiondesign.json.GetAllProductList;import com.fashion.binge.fashiondesign.json.MultipleCategorySearch;import com.fashion.binge.fashiondesign.models.CategoryModel;import com.fashion.binge.fashiondesign.models.CategorySearchModel;import com.fashion.binge.fashiondesign.shared_preference.SharedPrefrenceInfo;import com.fashion.binge.fashiondesign.sweetalertdialog.SweetAlertDialog;import com.mixpanel.android.mpmetrics.MixpanelAPI;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;public class CategorySearch extends AppCompatActivity implements View.OnClickListener {    private TextView toolbarTitle;    private Toolbar toolbar;    private ImageView cart, notification;    private TextView cartCount, notificationCount;    private TextView women, men, children;    private RecyclerView recyclerView, sizeRecyclerView, colorRecyclerView;    private List<CategoryModel> categoryModelList;    private List<CategoryModel> tempCategoryModelList;    private LinearLayout levelOneCataegoryParent;    private List<String> levelTwoCategorySearchFactor;    private String levelOneCategorySearchFactor;    private Button letsSearch;    private ImageView hamburgerMenu;    private String levelOnecategoryId;    private View moveableView;    private String swipeCategory = "";    private String totalProducts = "";    String projectToken;    MixpanelAPI mixpanel;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_category_search);        initialiseView();        initialiseListeners();        setSupportActionBar(toolbar);        hamburgerMenu.setImageResource(R.mipmap.ic_cancel);        hamburgerMenu.setAdjustViewBounds(true);        hamburgerMenu.setPadding(15, 35, 15, 35);        hamburgerMenu.setVisibility(View.VISIBLE);        SetStatusBarColor.setStausBarColor(this);        toolbarTitle.setText(R.string.search);        projectToken = "8fdaec76ab6e8d1bccc743cb076c3707";        mixpanel = MixpanelAPI.getInstance(CategorySearch.this,projectToken);        cart.setVisibility(View.GONE);        cartCount.setVisibility(View.GONE);        notification.setVisibility(View.GONE);        notificationCount.setVisibility(View.GONE);        moveableView.post(new Runnable() {            @Override            public void run() {                moveableView.getLayoutParams().width = women.getWidth();                moveableView.requestLayout();            }        });        requestCategory();        /**resetting value of swippable category         *         */        Utils.requestSwippableCategory=1;    }    private void initialiseView() {        toolbarTitle = (TextView) findViewById(R.id.toolbar_title);        toolbar = (Toolbar) findViewById(R.id.toolbar);        cart = (ImageView) findViewById(R.id.cart);        notification = (ImageView) findViewById(R.id.notification);        cartCount = (TextView) findViewById(R.id.cart_number);        notificationCount = (TextView) findViewById(R.id.notification_number);        women = (TextView) findViewById(R.id.women);        men = (TextView) findViewById(R.id.men);        children = (TextView) findViewById(R.id.children);        recyclerView = (RecyclerView) findViewById(R.id.recycler_view);        sizeRecyclerView = (RecyclerView) findViewById(R.id.size_recycler_view);        colorRecyclerView = (RecyclerView) findViewById(R.id.color_recycler_view);        levelOneCataegoryParent = (LinearLayout) findViewById(R.id.level_one_category_parent);        letsSearch = (Button) findViewById(R.id.lets_search);        hamburgerMenu = (ImageView) findViewById(R.id.hamburger_menu);        moveableView = findViewById(R.id.moveable_view);    }    private void initialiseListeners() {        women.setOnClickListener(this);        men.setOnClickListener(this);        children.setOnClickListener(this);        letsSearch.setOnClickListener(this);        hamburgerMenu.setOnClickListener(this);    }    private void prepareRecyclerView(List<CategoryModel> categoryModelList, final SweetAlertDialog sweetAlertDialog) {        levelTwoCategorySearchFactor = new ArrayList<>();        recyclerView.setHasFixedSize(false);        recyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));        recyclerView.addItemDecoration(new LevelTwoCategoryItemDecoration(20));        recyclerView.setAdapter(new LevelTwoCategoryRecyclerAdapter(this, categoryModelList, levelTwoCategorySearchFactor));        setWomenSelected();        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                recyclerView.setVisibility(View.VISIBLE);                levelOneCataegoryParent.setVisibility(View.VISIBLE);                moveableView.setVisibility(View.VISIBLE);                sweetAlertDialog.dismissWithAnimation();            }        }, 300);    }    private void prepareSizeRecyclerView() {        sizeRecyclerView.setHasFixedSize(false);        sizeRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));        sizeRecyclerView.addItemDecoration(new LevelTwoCategoryItemDecoration(20));        List<String> size = new ArrayList<>();        size.add("L");        size.add("X");        size.add("XL");        size.add("XXL");        size.add("XXXL");        sizeRecyclerView.setAdapter(new LevelTwoSizeRecyclerAdapter(this, size));    }    private void prepareColorRecyclerView() {        colorRecyclerView.setHasFixedSize(false);        colorRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));        colorRecyclerView.addItemDecoration(new LevelTwoCategoryItemDecoration(20));        colorRecyclerView.setAdapter(new LevelTwoColorRecyclerAdapter(this, categoryModelList));    }    private void requestCategory() {        final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);        final SweetAlertDialog pDialog = new AlertDIalogMessage().showProgressDialog(this, "Loading...");        new Category(this).requestCategory(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new ResponseInfoHolder() {            @Override            public void setFollowingInfo(String success, String data) {                if (success.equals("401")) {                    pDialog.dismiss();                    Utils.setTokenInfo(CategorySearch.this, pDialog, new AccessTokenInfoHolder() {                        @Override                        public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                            requestCategory();                        }                    });                } else {                    try {                        JSONArray jsonArray = new JSONArray(data);                        categoryModelList = new ArrayList<>();                        tempCategoryModelList = new ArrayList<>();                        for (int i = 0; i < jsonArray.length(); i++) {                            JSONObject jsonObject = jsonArray.getJSONObject(i);                            String name = jsonObject.getString("name");                            String categoryId = jsonObject.getString("category_id");                            //setting up level one category                            if (i == 0) {                                women.setText(name.toUpperCase());                                women.setTag(categoryId);                            } else if (i == 1) {                                men.setText(name.toUpperCase());                                men.setTag(categoryId);                            } else {                                children.setText(name.toUpperCase());                                children.setTag(categoryId);                            }                            //setting up level two category                            String categories = jsonObject.getString("categories");                            JSONArray categoriesJsonArray = new JSONArray(categories);                            for (int j = 0; j < categoriesJsonArray.length(); j++) {                                CategoryModel categoryModel = new CategoryModel();                                JSONObject categoryJsonObject = categoriesJsonArray.getJSONObject(j);                                String levelTwoCategoryId = categoryJsonObject.getString("category_id");                                String levelTwoCategoryName = categoryJsonObject.getString("name");                                String levelTwoCategoryImage = categoryJsonObject.getString("image");                                categoryModel.setParentCategoryName(name);                                categoryModel.setCategoryId(levelTwoCategoryId);                                categoryModel.setCategoryName(levelTwoCategoryName);                                categoryModel.setCategoryImage(levelTwoCategoryImage);                                categoryModel.setBackgroundEnabled(false);                                categoryModelList.add(categoryModel);                            }                        }                        tempCategoryModelList.addAll(categoryModelList);                        prepareRecyclerView(categoryModelList, pDialog);                        prepareColorRecyclerView();                        prepareSizeRecyclerView();                    } catch (JSONException e) {                        e.printStackTrace();                    }                }            }        });    }    private void filterLevelTwoCategory(String levelOneCategorySearchFactor) {        categoryModelList.clear();        for (int i = 0; i < tempCategoryModelList.size(); i++) {            CategoryModel categoryModel = tempCategoryModelList.get(i);            if (levelOneCategorySearchFactor.equals(categoryModel.getParentCategoryName())) {                categoryModelList.add(categoryModel);            }        }        recyclerView.getAdapter().notifyDataSetChanged();    }    private void getCategoryData(String id) {        final SweetAlertDialog pDialog = new SweetAlertDialog(CategorySearch.this, SweetAlertDialog.PROGRESS_TYPE);        pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));        pDialog.setTitleText("Loading data");        pDialog.setCancelable(true);        pDialog.show();        final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(CategorySearch.this);        new GetAllProductList(CategorySearch.this).getProductListContent(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), id, new GetProductByShopInterface() {            @Override            public void setErrorInfo(String message) {                pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                pDialog.setTitleText(message);            }            @Override            public void setSuccessInfo(JSONArray jsonArray, List<String> id, final List<String> name, List<String> image, List<String> price, List<String> wishlist, List<String> internationalShipping, List<String> category, List<List<String>> colorList, List<List<String>> sizeList, List<List<String>> categoryList, List<JSONArray> jsonArrayList,String totalProduct) {                try {                    pDialog.dismissWithAnimation();                    totalProducts=totalProduct;                    searchMultipleCategory(jsonArray);                } catch (JSONException e) {                    e.printStackTrace();                }            }        });    }    private void setWomenSelected() {        men.setTextColor(Color.parseColor("#54626c"));        children.setTextColor(Color.parseColor("#54626c"));        women.setTextColor(Color.parseColor("#ffffff"));        levelOneCategorySearchFactor = "Women";        levelOnecategoryId = women.getTag().toString();        filterLevelTwoCategory(levelOneCategorySearchFactor);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == android.R.id.home) {            finish();            return true;        }        return super.onOptionsItemSelected(item);    }    private void clearPrevouslySelectedBackground() {        for (int i = 0; i < categoryModelList.size(); i++) {            CategoryModel categoryModel = categoryModelList.get(i);            categoryModel.setBackgroundEnabled(false);        }        levelTwoCategorySearchFactor.clear();        recyclerView.getAdapter().notifyDataSetChanged();    }    @Override    public void onClick(View view) {        int id = view.getId();        switch (id) {            case R.id.men:                clearPrevouslySelectedBackground();                animateView(men, "center");                women.setTextColor(Color.parseColor("#54626c"));                children.setTextColor(Color.parseColor("#54626c"));                levelOneCategorySearchFactor = "Men";                levelOnecategoryId = men.getTag().toString();                filterLevelTwoCategory(levelOneCategorySearchFactor);                mixpanel.track("CategorySearch : Men Clicked", null);                break;            case R.id.women:                clearPrevouslySelectedBackground();                animateView(women, "left");                setWomenSelected();                mixpanel.track("CategorySearch : Women Clicked", null);                break;            case R.id.children:                clearPrevouslySelectedBackground();                animateView(children, "right");                women.setTextColor(Color.parseColor("#54626c"));                men.setTextColor(Color.parseColor("#54626c"));                levelOneCategorySearchFactor = "Children";                levelOnecategoryId = children.getTag().toString();                filterLevelTwoCategory(levelOneCategorySearchFactor);                mixpanel.track("CategorySearch : Children", null);                break;            case R.id.lets_search:                JSONUrl.CATEGORY_SEARCH_URL = "";                swipeCategory = "";                if (levelTwoCategorySearchFactor.size() == 0) {                    getCategoryData(levelOnecategoryId);                } else {                    for (int i = 0; i < levelTwoCategorySearchFactor.size(); i++) {                        swipeCategory = swipeCategory + "&swipe_category[]=" + levelTwoCategorySearchFactor.get(i);                    }                    Utils.requestSwippableCategory = 1;                    JSONUrl.CATEGORY_SEARCH_URL = "route=feed/rest_api/products" + swipeCategory + "&start=" + Utils.requestSwippableCategory + "&limit=20";                    requestMultipleCategory();                }                mixpanel.track("Category Search : Lets search", null);                break;            case R.id.hamburger_menu:                mixpanel.track("CategorySearch: cancelled", null);                finish();                break;        }    }    private void requestMultipleCategory() {        final SweetAlertDialog pDialog = new SweetAlertDialog(CategorySearch.this, SweetAlertDialog.PROGRESS_TYPE);        pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));        pDialog.setTitleText("Searching products");        pDialog.setCancelable(false);        pDialog.show();        final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(CategorySearch.this);        new MultipleCategorySearch(this).requestMultipleCategorySearch(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {            @Override            public void onResponse(String status, String message) {                if (status.equals("401")) {                    pDialog.dismiss();                    Utils.setTokenInfo(CategorySearch.this, pDialog, new AccessTokenInfoHolder() {                        @Override                        public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                            requestMultipleCategory();                        }                    });                } else {                    if (status.equals("false")) {                        pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                        pDialog.setTitleText(message);                    } else {                        pDialog.dismissWithAnimation();                        try {                            totalProducts="";                            totalProducts=status;                            JSONArray jsonArray = new JSONArray(message);                            searchMultipleCategory(jsonArray);                        } catch (JSONException ex) {                            ex.printStackTrace();                        }                    }                }            }        });    }    private void searchMultipleCategory(JSONArray jsonArray) throws JSONException {        List<CategorySearchModel> categorySearchModelList = new ArrayList<>();        for (int i = 0; i < jsonArray.length(); i++) {            JSONObject jsonObject = jsonArray.getJSONObject(i);            CategorySearchModel categorySearchModel = new CategorySearchModel();            String id = jsonObject.getString("id");            String image = jsonObject.getString("image");            String price = jsonObject.getString("price");            String sellerNickName = jsonObject.getString("seller_nickname");            String sellerName = jsonObject.getString("name");            String sellerBanner = jsonObject.getString("seller_banner");            String sellerId = jsonObject.getString("seller_id");            String sellerAvatar = jsonObject.getString("seller_avatar");            categorySearchModel.setId(id);            categorySearchModel.setImage(image);            categorySearchModel.setPrice(price);            categorySearchModel.setSellerNickName(sellerNickName);            categorySearchModel.setName(sellerName);            categorySearchModel.setBanner(sellerBanner);            categorySearchModel.setSellerId(sellerId);            categorySearchModel.setSellerAvater(sellerAvatar);            categorySearchModelList.add(categorySearchModel);        }        Utils.categoryModelList.clear();        Utils.categoryModelList.addAll(categorySearchModelList);        Intent intent = new Intent(CategorySearch.this, NewProductListPage.class);        intent.putExtra("swipe_category", swipeCategory);        intent.putExtra("name", "Results");        intent.putExtra("total_products",totalProducts);        intent.putExtra("searchFactorSize",levelTwoCategorySearchFactor.size());        intent.putExtra("level_one_category_id",levelOnecategoryId);        startActivity(intent);    }    private void animateView(final TextView destination, final String destinationPosition) {        TranslateAnimation animation = new TranslateAnimation(0, destination.getX() - moveableView.getX(), 0, destination.getY() - moveableView.getY());        animation.setRepeatMode(0);        animation.setDuration(200);        animation.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                moveableView.clearAnimation();                RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(women.getWidth(), moveableView.getHeight());                switch (destinationPosition) {                    case "right":                        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);                        break;                    case "center":                        layoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);                        break;                    case "left":                        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);                        break;                }                layoutParams.addRule(RelativeLayout.CENTER_VERTICAL);                layoutParams.setMargins(14, 0, 14, 0);                destination.setTextColor(Color.WHITE);                moveableView.setLayoutParams(layoutParams);            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        moveableView.startAnimation(animation);    }    @Override    protected void onPostResume() {        super.onPostResume();        totalProducts="";        Utils.requestSwippableCategory=1;    }}