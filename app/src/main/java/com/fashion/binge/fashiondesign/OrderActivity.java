package com.fashion.binge.fashiondesign;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.graphics.Color;import android.os.Bundle;import android.preference.PreferenceManager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.view.MenuItem;import android.view.View;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import com.fashion.binge.fashiondesign.adapters.OrderListAdapter;import com.fashion.binge.fashiondesign.classes.SetStatusBarColor;import com.fashion.binge.fashiondesign.classes.Utils;import com.fashion.binge.fashiondesign.interfaces.AccessTokenInfoHolder;import com.fashion.binge.fashiondesign.interfaces.JsonResponseHolder;import com.fashion.binge.fashiondesign.json.GetOrderListData;import com.fashion.binge.fashiondesign.models.OrderListModel;import com.fashion.binge.fashiondesign.shared_preference.SharedPrefrenceInfo;import com.fashion.binge.fashiondesign.sweetalertdialog.SweetAlertDialog;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;public class OrderActivity extends AppCompatActivity implements View.OnClickListener {    private Toolbar toolbar;    private TextView toolbarTitle;    private SharedPreferences sharedPreferences;    private ImageView cart,notification;    private ListView orderList;    private TextView cartCount,notificationCount;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_order);        if (!Homepage.isTablet(this)) {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        }        initialiseLayout();        initialiseListeners();        setSupportActionBar(toolbar);        //noinspection ConstantConditions        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        SetStatusBarColor.setStausBarColor(this);        toolbarTitle.setText(R.string.order_list);        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);        cart.setVisibility(View.GONE);        cartCount.setVisibility(View.GONE);        notification.setVisibility(View.GONE);        notificationCount.setVisibility(View.GONE);        setOrderList();    }    private void initialiseLayout() {        toolbar = (Toolbar) findViewById(R.id.toolbar);        toolbarTitle = (TextView) findViewById(R.id.toolbar_title);        cart = (ImageView) findViewById(R.id.cart);        orderList = (ListView) findViewById(R.id.order_list);        cartCount=(TextView)findViewById(R.id.cart_number);        notification=(ImageView)findViewById(R.id.notification);        notificationCount=(TextView)findViewById(R.id.notification_number);    }    private void setOrderList() {        final SweetAlertDialog pDialog = new SweetAlertDialog(OrderActivity.this, SweetAlertDialog.PROGRESS_TYPE);        pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));        pDialog.setTitleText("Getting content");        pDialog.setCancelable(true);        pDialog.show();        new GetOrderListData(this).getOrderListData(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {            @Override            public void onResponse(String status, String message) {                if (status.equals("401")) {                    Utils.setTokenInfo(OrderActivity.this, pDialog, new AccessTokenInfoHolder() {                        @Override                        public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                            pDialog.dismissWithAnimation();                            setOrderList();                        }                    });                } else {                    if (status.equals("true")) {                        try {                            JSONObject jsonObject = new JSONObject(message);                            String orders = jsonObject.getString("orders");                            JSONArray jsonArray = new JSONArray(orders);                            List<OrderListModel> orderListModelList = new ArrayList<>();                            for (int i = 0; i < jsonArray.length(); i++) {                                JSONObject jsonObject1 = jsonArray.getJSONObject(i);                                String orderId = jsonObject1.getString("order_id");                                String name = jsonObject1.getString("name");                                String orderStatus = jsonObject1.getString("status");                                String dateAdded = jsonObject1.getString("date_added");                                String products = jsonObject1.getString("products");                                String total = jsonObject1.getString("total");                                OrderListModel orderListModel = new OrderListModel();                                orderListModel.setOrderId(orderId);                                orderListModel.setName(name);                                orderListModel.setOrderStatus(orderStatus);                                orderListModel.setDateAdded(dateAdded);                                orderListModel.setProducts(products);                                orderListModel.setTotal(total);                                orderListModelList.add(orderListModel);                            }                            pDialog.dismissWithAnimation();                            orderList.setAdapter(new OrderListAdapter(OrderActivity.this, orderListModelList));                        } catch (JSONException ex) {                            ex.printStackTrace();                        }                    } else {                        pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                        pDialog.setTitleText(message);                        pDialog.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {                            @Override                            public void onClick(SweetAlertDialog sweetAlertDialog) {                                pDialog.dismiss();                                OrderActivity.this.finish();                                OrderActivity.this.overridePendingTransition(android.R.anim.slide_in_left, android.R.anim.slide_out_right);                            }                        });                    }                }            }        });    }    private void initialiseListeners() {        cart.setOnClickListener(this);    }    @Override    public void onClick(View v) {    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == android.R.id.home) {            finish();            return true;        }        return super.onOptionsItemSelected(item);    }}