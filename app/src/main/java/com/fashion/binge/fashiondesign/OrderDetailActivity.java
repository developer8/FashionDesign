package com.fashion.binge.fashiondesign;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.graphics.Color;import android.os.Bundle;import android.preference.PreferenceManager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import com.fashion.binge.fashiondesign.adapters.OrderDetailRecyclerAdapter;import com.fashion.binge.fashiondesign.classes.SetStatusBarColor;import com.fashion.binge.fashiondesign.classes.Utils;import com.fashion.binge.fashiondesign.interfaces.AccessTokenInfoHolder;import com.fashion.binge.fashiondesign.interfaces.JsonResponseHolder;import com.fashion.binge.fashiondesign.json.GetOrderDetailData;import com.fashion.binge.fashiondesign.models.OrderDetailItemModel;import com.fashion.binge.fashiondesign.models.OrderDetailModel;import com.fashion.binge.fashiondesign.shared_preference.SharedPrefrenceInfo;import com.fashion.binge.fashiondesign.sweetalertdialog.SweetAlertDialog;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;public class OrderDetailActivity extends AppCompatActivity {    private Toolbar toolbar;    private TextView toolbarTitle;    private SharedPreferences sharedPreferences;    private ImageView cart,notification;    private String id, addedDate, status;    private RecyclerView recyclerView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        id = getIntent().getStringExtra("id");        addedDate = getIntent().getStringExtra("date_added");        status = getIntent().getStringExtra("status");        setContentView(R.layout.activity_order_detail);        if (!Homepage.isTablet(this)) {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        }        initialiseLayout();        setSupportActionBar(toolbar);        //noinspection ConstantConditions        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        SetStatusBarColor.setStausBarColor(this);        toolbarTitle.setText(R.string.order_detail);        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);        cart.setVisibility(View.GONE);        notification.setVisibility(View.GONE);        recyclerView.setLayoutManager(new LinearLayoutManager(this));        recyclerView.setHasFixedSize(true);        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(final RecyclerView recyclerView, int dx, final int dy) {                super.onScrolled(recyclerView, dx, dy);                View view = recyclerView.getChildAt(0);                if (view != null && recyclerView.getChildAdapterPosition(view) == 0) {                    view.setTranslationY((float) (-view.getTop() / 5));                }            }        });        setOrderDetail();    }    private void initialiseLayout() {        toolbar = (Toolbar) findViewById(R.id.toolbar);        toolbarTitle = (TextView) findViewById(R.id.toolbar_title);        cart = (ImageView) findViewById(R.id.cart);        notification=(ImageView)findViewById(R.id.notification);        recyclerView = (RecyclerView) findViewById(R.id.recycler_view);    }    private void setOrderDetail() {        final SweetAlertDialog pDialog = new SweetAlertDialog(OrderDetailActivity.this, SweetAlertDialog.PROGRESS_TYPE);        pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));        pDialog.setTitleText("Getting content");        pDialog.setCancelable(true);        pDialog.show();        new GetOrderDetailData(this).getOrderListData(pDialog, id, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {            @Override            public void onResponse(String status, String message) {                if (status.equals("401")) {                    Utils.setTokenInfo(OrderDetailActivity.this, pDialog, new AccessTokenInfoHolder() {                        @Override                        public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                            pDialog.dismissWithAnimation();                            setOrderDetail();                        }                    });                } else {                    if (status.equals("true")) {                        pDialog.dismissWithAnimation();                        try {                            JSONObject jsonObject = new JSONObject(message);                            String orderId = jsonObject.getString("order_id");                            String paymentMethod = jsonObject.getString("payment_method");                            String shippingMethod = jsonObject.getString("shipping_method");                            String paymentDescription = jsonObject.getString("payment_address");                            String shippingDescription = jsonObject.getString("shipping_address");                            String products = jsonObject.getString("products");                            JSONArray jsonArray = new JSONArray(products);                            Log.e("Json response", jsonArray.toString());                            //item model goes here                            List<OrderDetailItemModel> orderDetailItemModelList = new ArrayList<>();                            String name = "", colorValue = "", quantity = "", price = "", sizeValue = "";                            for (int i = 0; i < jsonArray.length(); i++) {                                JSONObject jsonObject1 = jsonArray.getJSONObject(i);                                OrderDetailItemModel orderDetailItemModel = new OrderDetailItemModel();                                name = jsonObject1.getString("name");                                //model = jsonObject1.getString("model");                                quantity = jsonObject1.getString("quantity");                                price = jsonObject1.getString("price");                                String option = jsonObject1.getString("option");                                JSONArray jsonArray1 = new JSONArray(option);                                List<String> colorList = new ArrayList<>();                                List<String> sizeList = new ArrayList<>();                                for (int j = 0; j < jsonArray1.length(); j++) {                                    JSONObject jsonObject2 = jsonArray1.getJSONObject(j);                                    String optionName = jsonObject2.getString("name");                                    if (optionName.equals("Size")) {                                        sizeValue = jsonObject2.getString("value");                                        sizeList.add(sizeValue);                                    } else if (optionName.equals("Color")) {                                        colorValue = jsonObject2.getString("value");                                        colorList.add(colorValue);                                    }                                }                                orderDetailItemModel.setProductName(name);                                orderDetailItemModel.setQuantity(quantity);                                orderDetailItemModel.setPrice(price);                                orderDetailItemModel.setSize(sizeList);                                orderDetailItemModel.setColor(colorList);                                orderDetailItemModelList.add(orderDetailItemModel);                            }                            OrderDetailModel orderDetailModel = new OrderDetailModel();                            orderDetailModel.setOrderId(orderId);                            orderDetailModel.setDateAdded(addedDate);                            orderDetailModel.setPaymentMethod(paymentMethod);                            orderDetailModel.setShippingMethod(shippingMethod);                            orderDetailModel.setPaymentDescription(paymentDescription);                            orderDetailModel.setShippingDescription(shippingDescription);                            orderDetailModel.setStatusText(OrderDetailActivity.this.status);                            recyclerView.setAdapter(new OrderDetailRecyclerAdapter(OrderDetailActivity.this, orderDetailModel,orderDetailItemModelList));                        } catch (JSONException e) {                            e.printStackTrace();                        }                    } else {                        pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                        pDialog.setTitleText(message);                    }                }            }        });    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == android.R.id.home) {            finish();            return true;        }        return super.onOptionsItemSelected(item);    }}