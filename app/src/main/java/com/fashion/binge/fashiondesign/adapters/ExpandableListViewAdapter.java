package com.fashion.binge.fashiondesign.adapters;import android.content.Context;import android.content.SharedPreferences;import android.database.DataSetObserver;import android.graphics.Color;import android.preference.PreferenceManager;import android.support.v4.content.ContextCompat;import android.support.v7.app.AlertDialog;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseExpandableListAdapter;import android.widget.Button;import android.widget.ExpandableListView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import com.fashion.binge.fashiondesign.R;import com.fashion.binge.fashiondesign.classes.CustomHashMap;import com.fashion.binge.fashiondesign.classes.Utils;import com.fashion.binge.fashiondesign.interfaces.AccessTokenInfoHolder;import com.fashion.binge.fashiondesign.interfaces.JsonResponseHolder;import com.fashion.binge.fashiondesign.interfaces.ShippingInfoDataHolder;import com.fashion.binge.fashiondesign.interfaces.ShippingMethodSelectionIdentifier;import com.fashion.binge.fashiondesign.json.PostShippingMethod;import com.fashion.binge.fashiondesign.models.ShippingInnerModel;import com.fashion.binge.fashiondesign.models.ShippingModel;import com.fashion.binge.fashiondesign.models.ShippingProductModel;import com.fashion.binge.fashiondesign.shared_preference.SharedPrefrenceInfo;import com.fashion.binge.fashiondesign.sweetalertdialog.SweetAlertDialog;import org.json.JSONException;import org.json.JSONObject;import java.util.HashMap;import java.util.List;import java.util.Map;public class ExpandableListViewAdapter extends BaseExpandableListAdapter {    private Context context;    private List<ShippingInnerModel> listDataHeader;    private CustomHashMap<ShippingInnerModel, List<ShippingProductModel>> listDataChild;    private Map<String, List<ShippingModel>> shippingMap;    private ShippingInfoDataHolder shippingInfoDataHolder;    private Map<Integer, Double> map = new HashMap<>();    public ExpandableListViewAdapter(Context context, Map<String, List<ShippingModel>> shippingMap, List<ShippingInnerModel> listDataHeader, CustomHashMap<ShippingInnerModel, List<ShippingProductModel>> listDataChild, ShippingInfoDataHolder shippingInfoDataHolder) {        this.context = context;        this.listDataHeader = listDataHeader;        this.listDataChild = listDataChild;        this.shippingMap = shippingMap;        this.shippingInfoDataHolder = shippingInfoDataHolder;    }    @Override    public int getGroupCount() {        return this.listDataHeader.size();    }    @Override    public int getChildrenCount(int groupPosition) {        return this.listDataChild.get(this.listDataHeader.get(groupPosition))                .size();    }    @Override    public Object getGroup(int groupPosition) {        return this.listDataHeader.get(groupPosition);    }    @Override    public Object getChild(int groupPosition, int childPosition) {        return this.listDataChild.get(this.listDataHeader.get(groupPosition))                .get(childPosition);    }    @Override    public long getGroupId(int groupPosition) {        return groupPosition;    }    @Override    public long getChildId(int groupPosition, int childPosition) {        return childPosition;    }    @Override    public boolean hasStableIds() {        return false;    }    @Override    public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {        if (convertView == null) {            LayoutInflater infalInflater = (LayoutInflater) this.context                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);            convertView = infalInflater.inflate(R.layout.expandable_header, parent, false);        }        ShippingInnerModel shippingInnerModel = listDataHeader.get(groupPosition);        TextView shopName = (TextView) convertView.findViewById(R.id.shop_name);        shopName.setText(String.format("Seller:%s", shippingInnerModel.getSellerName()));        ExpandableListView mExpandableListView = (ExpandableListView) parent;        mExpandableListView.expandGroup(groupPosition);        return convertView;    }    @Override    public View getChildView(final int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {        if (convertView == null) {            LayoutInflater infalInflater = (LayoutInflater) this.context                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);            convertView = infalInflater.inflate(R.layout.expandable_child, parent, false);        }        final ShippingProductModel shippingProductModel = (ShippingProductModel) getChild(groupPosition, childPosition);        final LinearLayout lowerBottomContent = (LinearLayout) convertView.findViewById(R.id.lower_bottom_content);        final LinearLayout topContent = (LinearLayout) convertView.findViewById(R.id.top_content);        LinearLayout bottomContent = (LinearLayout) convertView.findViewById(R.id.bottom_content);        TextView productName = (TextView) convertView.findViewById(R.id.product_name);        productName.setText(shippingProductModel.getProductName());        TextView quantity = (TextView) convertView.findViewById(R.id.quantity);        quantity.setText(shippingProductModel.getQuantity());        TextView price = (TextView) convertView.findViewById(R.id.price);        final ImageView pencil = (ImageView) convertView.findViewById(R.id.pencil);        final Button selectShippingButton = (Button) convertView.findViewById(R.id.select_shipping_button);        final TextView totalPrice = (TextView) convertView.findViewById(R.id.total_price);        pencil.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ShippingInnerModel shippingInnerModel = listDataHeader.get(groupPosition);                shippingCostDialog(shippingInnerModel.getSellerId(), shippingProductModel, selectShippingButton, pencil, lowerBottomContent, totalPrice);            }        });        price.setText(shippingProductModel.getTotal());        selectShippingButton.setText(shippingProductModel.getShippingMethod());        selectShippingButton.setTag(groupPosition);        selectShippingButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ShippingInnerModel shippingInnerModel = listDataHeader.get(groupPosition);                shippingCostDialog(shippingInnerModel.getSellerId(), shippingProductModel, selectShippingButton, pencil, lowerBottomContent, totalPrice);            }        });        if (isLastChild) {            lowerBottomContent.setVisibility(View.VISIBLE);            topContent.setVisibility(View.GONE);            bottomContent.setVisibility(View.GONE);            if (shippingProductModel.isShippingBackgroundEnabled()) {                selectShippingButton.setBackground(ContextCompat.getDrawable(context, R.drawable.rounded_button));                selectShippingButton.setPadding(30, 0, 30, 0);                lowerBottomContent.setPadding(0, 20, 0, 20);                selectShippingButton.setTextColor(Color.parseColor("#ffffff"));            } else {                selectShippingButton.setBackground(null);                selectShippingButton.setTextColor(Color.parseColor("#9fa8af"));                pencil.setVisibility(View.VISIBLE);                selectShippingButton.setPadding(15, 0, 5, 0);                lowerBottomContent.setPadding(0, 5, 0, 5);            }        } else {            lowerBottomContent.setVisibility(View.GONE);            topContent.setVisibility(View.VISIBLE);            bottomContent.setVisibility(View.VISIBLE);        }        return convertView;    }    @Override    public boolean isChildSelectable(int groupPosition, int childPosition) {        return true;    }    private void shippingCostDialog(final String sellerId, final ShippingProductModel shippingProductModel, final Button selectShippingButton, final ImageView pencil, final LinearLayout lowerBottomContent, final TextView totalPrice) {        List<ShippingModel> shippingModelList = shippingMap.get(sellerId);        AlertDialog.Builder builder = new AlertDialog.Builder(context);        final View view = View.inflate(context, R.layout.addresses_alert_dialog, null);        TextView title = (TextView) view.findViewById(R.id.title);        title.setText(R.string.select_shipping_cost);        builder.setView(view);        ListView shippingList = (ListView) view.findViewById(R.id.address_content);        final AlertDialog alertDialog = builder.create();        final Button cancel = (Button) view.findViewById(R.id.cancel);        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                alertDialog.dismiss();            }        });        ShippingListAdapter shippingListAdapter = new ShippingListAdapter(context, shippingModelList, new ShippingMethodSelectionIdentifier() {            @Override            public void onShippingMethodSelected(String shippingMethodId, final String sellerDescription, final String cost, final String unformattedCost) {                alertDialog.dismiss();                final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);                final SweetAlertDialog pDialog = new SweetAlertDialog(context, SweetAlertDialog.PROGRESS_TYPE);                pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));                pDialog.setTitleText("Collecting information");                pDialog.setCancelable(true);                pDialog.show();                JSONObject jsonObject = new JSONObject();                JSONObject innerJSONObject = new JSONObject();                try {                    innerJSONObject.put(sellerId, shippingMethodId);                    innerJSONObject.put("cost_unformatted", unformattedCost);                    innerJSONObject.put("name", sellerDescription);                    jsonObject.put("shipping_method", innerJSONObject);                } catch (JSONException ex) {                    ex.printStackTrace();                }                new PostShippingMethod(context).postShippingMethod(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), jsonObject.toString(), new JsonResponseHolder() {                    @Override                    public void onResponse(String success, String data) {                        if (success.equals("401")) {                            Utils.setTokenInfo(context, pDialog, new AccessTokenInfoHolder() {                                @Override                                public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                    pDialog.dismissWithAnimation();                                    shippingCostDialog(sellerId, shippingProductModel, selectShippingButton, pencil, lowerBottomContent, totalPrice);                                }                            });                        } else {                            if (success.equals("true")) {                                pDialog.changeAlertType(SweetAlertDialog.SUCCESS_TYPE);                                pDialog.setTitleText("Successfully posted shipping method ");                                selectShippingButton.setTextColor(Color.parseColor("#9fa8af"));                                pencil.setVisibility(View.VISIBLE);                                selectShippingButton.setPadding(15, 0, 5, 0);                                lowerBottomContent.setPadding(0, 5, 0, 5);                                shippingProductModel.setShippingMethod(sellerDescription);                                shippingProductModel.setShippingBackgroundEnabled(false);                                Double shippingCost = Double.parseDouble(unformattedCost.replaceAll("[^\\d.]+|\\.(?!\\d)", ""));                                shippingProductModel.setTotalPrice(String.format("%.2f", shippingCost));                                totalPrice.setText(String.format("S$%s", shippingProductModel.getTotalPrice()));                                ExpandableListViewAdapter.this.notifyDataSetChanged();                                if (map.containsKey((int) selectShippingButton.getTag())) {                                    map.remove((int) selectShippingButton.getTag());                                    map.put((int) selectShippingButton.getTag(), Double.parseDouble(unformattedCost.replaceAll("[^\\d.]+|\\.(?!\\d)", "")));                                } else {                                    map.put((int) selectShippingButton.getTag(), Double.parseDouble(unformattedCost.replaceAll("[^\\d.]+|\\.(?!\\d)", "")));                                }                                shippingInfoDataHolder.setShippingInfoDataHolder(map, selectShippingButton);                                selectShippingButton.setBackground(null);                            } else {                                pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                                pDialog.setTitleText(data);                            }                        }                    }                });            }        });        shippingList.setAdapter(shippingListAdapter);        alertDialog.show();    }    @Override    public void registerDataSetObserver(DataSetObserver observer) {        super.registerDataSetObserver(observer);    }}