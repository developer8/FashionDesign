package com.fashion.binge.fashiondesign;import android.app.Activity;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.graphics.Color;import android.os.Bundle;import android.preference.PreferenceManager;import android.support.annotation.Nullable;import android.support.design.widget.CoordinatorLayout;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v4.content.ContextCompat;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.AppCompatCheckBox;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.text.Html;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.TranslateAnimation;import android.widget.Button;import android.widget.EditText;import android.widget.ExpandableListView;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.TextView;import com.afollestad.materialdialogs.MaterialDialog;import com.braintreepayments.api.BraintreePaymentActivity;import com.braintreepayments.api.PaymentRequest;import com.braintreepayments.api.models.PaymentMethodNonce;import com.fashion.binge.fashiondesign.adapters.AddressListAdapter;import com.fashion.binge.fashiondesign.adapters.CompleteRecyclerAdapter;import com.fashion.binge.fashiondesign.adapters.ExpandableListViewAdapter;import com.fashion.binge.fashiondesign.classes.ConnectionManager;import com.fashion.binge.fashiondesign.classes.CustomHashMap;import com.fashion.binge.fashiondesign.classes.FormValidation;import com.fashion.binge.fashiondesign.classes.OnSwipeTouchListener;import com.fashion.binge.fashiondesign.classes.SetStatusBarColor;import com.fashion.binge.fashiondesign.classes.Utils;import com.fashion.binge.fashiondesign.interfaces.AccessTokenInfoHolder;import com.fashion.binge.fashiondesign.interfaces.AdressSelectioIdentifier;import com.fashion.binge.fashiondesign.interfaces.BillingValidator;import com.fashion.binge.fashiondesign.interfaces.JsonResponseHolder;import com.fashion.binge.fashiondesign.interfaces.LoginAndSignUpMessageSender;import com.fashion.binge.fashiondesign.interfaces.LoginInfoHolder;import com.fashion.binge.fashiondesign.interfaces.ResponseInfoHolder;import com.fashion.binge.fashiondesign.interfaces.ShippingInfoDataHolder;import com.fashion.binge.fashiondesign.interfaces.ShippingValidator;import com.fashion.binge.fashiondesign.json.CompletePaymentAddress;import com.fashion.binge.fashiondesign.json.Confirm;import com.fashion.binge.fashiondesign.json.CreateUser;import com.fashion.binge.fashiondesign.json.GetCartData;import com.fashion.binge.fashiondesign.json.GetPaymentAddress;import com.fashion.binge.fashiondesign.json.GetPaypalToken;import com.fashion.binge.fashiondesign.json.GetShippingMethod;import com.fashion.binge.fashiondesign.json.Login;import com.fashion.binge.fashiondesign.json.PostNewPaymentAddress;import com.fashion.binge.fashiondesign.json.PostNonceToken;import com.fashion.binge.fashiondesign.json.PostPaymentAddress;import com.fashion.binge.fashiondesign.models.ShippingInnerModel;import com.fashion.binge.fashiondesign.models.ShippingModel;import com.fashion.binge.fashiondesign.models.ShippingProductModel;import com.fashion.binge.fashiondesign.shared_preference.SharedPrefrenceInfo;import com.fashion.binge.fashiondesign.sweetalertdialog.SweetAlertDialog;import com.mixpanel.android.mpmetrics.MixpanelAPI;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class Checkout extends AppCompatActivity implements View.OnClickListener, LoginAndSignUpMessageSender, BillingValidator, ShippingValidator {    private TextView toolbarTitle, createAccount, subTotal, shipping, total, formattedTotal, formattedSubTotal, formattedShipping;    private Toolbar toolbar;    private RelativeLayout personalFragment, billingFragment, shippingFragment, completeFragment;    private Fragment lastFragment;    private LinearLayout signUpLayout, topParent;    private Button login, signUp;    private EditText email, password, firstName, lastName, signUpEmail, signUpPassword, retypePassword, telephone, postCode, city;    private CoordinatorLayout coordinatorLayout;    private TextView country;    private ExpandableListView expandableListView;    private List<ShippingInnerModel> listDataHeader;    private CustomHashMap<ShippingInnerModel, List<ShippingProductModel>> listDataChild;    private RecyclerView completeRecyclerList;    private FrameLayout personalContainer, billingContainer, shippingContainer, completeContainer;    private ImageView personalImage, billingImage, shippingImage, completeImage;    private ImageView[] imageViews;    private FrameLayout[] frameLayouts;    private EditText billingFirstName, billingLastName, billingAddressOne, billingCity, billingPostCode, billingCountry;    private String selectedAddress = "existing address";    private String addressId;    private int shippingCount = 0;    private double subTotalValue, shippingValue, totalValue, couponVlaue;    private String couponTitleValue = "Promo Code";    private ImageView cart, notification;    private TextView cartCount, notificationCount, coupon, couponPrice;    private String projectToken;    private MixpanelAPI mixpanel;        @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_checkout_check);        if (!Homepage.isTablet(this)) {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        }        initialiseViews();        imageViews = new ImageView[]{personalImage, billingImage, shippingImage, completeImage};        frameLayouts = new FrameLayout[]{personalContainer, billingContainer, shippingContainer, completeContainer};        initaliseListeners();        setSupportActionBar(toolbar);        projectToken = "8fdaec76ab6e8d1bccc743cb076c3707";        mixpanel = MixpanelAPI.getInstance(Checkout.this,projectToken);        //noinspection ConstantConditions        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        SetStatusBarColor.setStausBarColor(this);        toolbarTitle.setText(R.string.checkout);        cart.setVisibility(View.GONE);        cartCount.setVisibility(View.GONE);        notification.setVisibility(View.GONE);        notificationCount.setVisibility(View.GONE);        //initialise fragment        //if user is already logged in display billing fragment directly without going to personal fragment        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);        if (sharedPreferences.getString(SharedPrefrenceInfo.IS_USER_LOGGED_IN, "false").equals("false")) {            setUpBackground(personalImage, personalContainer);            setUpFragment(new PersonalFragment(), "PERSONAL_FRAGMENT");        } else {            setUpBackground(billingImage, billingContainer);            Bundle bundle = new Bundle();            BillingFragment billingFragment = new BillingFragment();            bundle.putBoolean("isChecked", true);            billingFragment.setArguments(bundle);            setUpFragment(billingFragment, "BILLING_FRAGMENT");        }        //if user clicked the personal button when he/she is in the billing fragment restring them to come in personal fragment    }    @Override    protected void onDestroy() {        mixpanel.flush();        super.onDestroy();    }    private void setUpFragment(Fragment fragment, String tag) {        if (lastFragment != null) {            getSupportFragmentManager().beginTransaction().remove(lastFragment).commit();        }        lastFragment = fragment;        FragmentManager fragmentManager = getSupportFragmentManager();        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();        fragmentTransaction.setCustomAnimations(android.R.anim.fade_in,                android.R.anim.fade_out);        fragmentTransaction.add(R.id.container, fragment, tag);        fragmentTransaction.commit();    }    private void initialiseViews() {        toolbarTitle = (TextView) findViewById(R.id.toolbar_title);        toolbar = (Toolbar) findViewById(R.id.toolbar);        personalFragment = (RelativeLayout) findViewById(R.id.personal);        billingFragment = (RelativeLayout) findViewById(R.id.billing);        shippingFragment = (RelativeLayout) findViewById(R.id.shipping);        completeFragment = (RelativeLayout) findViewById(R.id.complete);        personalContainer = (FrameLayout) findViewById(R.id.personal_container);        billingContainer = (FrameLayout) findViewById(R.id.billing_container);        shippingContainer = (FrameLayout) findViewById(R.id.shipping_container);        completeContainer = (FrameLayout) findViewById(R.id.complete_container);        personalImage = (ImageView) findViewById(R.id.personal_image);        billingImage = (ImageView) findViewById(R.id.billing_image);        shippingImage = (ImageView) findViewById(R.id.shipping_image);        completeImage = (ImageView) findViewById(R.id.complete_image);        cart = (ImageView) findViewById(R.id.cart);        cartCount = (TextView) findViewById(R.id.cart_number);        notification = (ImageView) findViewById(R.id.notification);        notificationCount = (TextView) findViewById(R.id.notification_number);    }    private void initaliseListeners() {        personalFragment.setOnClickListener(this);        billingFragment.setOnClickListener(this);        shippingFragment.setOnClickListener(this);        completeFragment.setOnClickListener(this);    }    private void setUpBackground(ImageView imageView, FrameLayout frameLayout) {        for (ImageView imageView1 : imageViews) {            if (imageView == imageView1) {                imageView.setColorFilter(Color.argb(255, 255, 255, 255));            } else {                imageView1.setColorFilter(Color.argb(0, 255, 255, 255));            }        }        for (FrameLayout frameLayout1 : frameLayouts) {            if (frameLayout == frameLayout1) {                frameLayout.setBackground(ContextCompat.getDrawable(this, R.drawable.circletextview));            } else {                frameLayout1.setBackgroundResource(0);            }        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == android.R.id.home) {            finish();            return true;        }        return super.onOptionsItemSelected(item);    }    @Override    public void onClick(View v) {    }    private void hideSignUpAnimationView(final LinearLayout linearLayout) {        TranslateAnimation anim = new TranslateAnimation(0, 0, 0, 1900);        anim.setDuration(300);        anim.setFillAfter(true);        linearLayout.startAnimation(anim);        anim.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {                //signInLayout.setVisibility(View.VISIBLE);            }            @Override            public void onAnimationEnd(Animation animation) {                linearLayout.clearAnimation();                if (signUpLayout.getVisibility() == View.VISIBLE) {                    signUpLayout.setVisibility(View.INVISIBLE);                }            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });    }    private void translateSignUpAnimationView(final LinearLayout linearLayout) {        TranslateAnimation anim = new TranslateAnimation(0, 0, 700, 0);        anim.setDuration(300);        anim.setFillAfter(true);        linearLayout.startAnimation(anim);        anim.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {                signUpLayout.setVisibility(View.VISIBLE);            }            @Override            public void onAnimationEnd(Animation animation) {                linearLayout.clearAnimation();            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });    }    @Override    public void setLoginAndSignUpMessage() {        setUpBackground(billingImage, billingContainer);        Bundle bundle = new Bundle();        BillingFragment billingFragment = new BillingFragment();        bundle.putBoolean("isChecked", true);        billingFragment.setArguments(bundle);        setUpFragment(billingFragment, "BILLING_FRAGMENT");    }    @Override    public void onBillingValidation(boolean isChecked) {        if (isChecked) {            setUpBackground(shippingImage, shippingContainer);            setUpFragment(new ShippingFragment(), "SHIPPING_FRAGMENT");        } else {            Bundle bundle = new Bundle();            setUpBackground(shippingImage, shippingContainer);            BillingFragment billingFragment = new BillingFragment();            bundle.putBoolean("isChecked", false);            billingFragment.setArguments(bundle);            setUpFragment(billingFragment, "BILLING_FRAGMENT");        }    }    @Override    public void onShippingValidation(double subTotalValue, double shippingValue, double totalValue, double coupon, String couponTitleValue) {        setUpBackground(completeImage, completeContainer);        CompleteFragment completeFragment = new CompleteFragment();        Bundle bundle = new Bundle();        bundle.putDouble("subTotal", subTotalValue);        bundle.putDouble("shipping", shippingValue);        bundle.putDouble("total", totalValue);        bundle.putDouble("coupon", coupon);        bundle.putString("coupon_title", couponTitleValue);        completeFragment.setArguments(bundle);        setUpFragment(completeFragment, "COMPLETE_FRAGMENT");    }    public static class PersonalFragment extends Fragment {        final Checkout checkout = new Checkout();        @Nullable        @Override        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {            View view = inflater.inflate(R.layout.personal_checkout_fragment, container, false);            checkout.createAccount = (TextView) view.findViewById(R.id.create_account);            checkout.signUpLayout = (LinearLayout) view.findViewById(R.id.sign_up_layout);            checkout.topParent = (LinearLayout) view.findViewById(R.id.top_parent);            checkout.login = (Button) view.findViewById(R.id.login);            checkout.email = (EditText) view.findViewById(R.id.email);            checkout.password = (EditText) view.findViewById(R.id.password);            checkout.coordinatorLayout = (CoordinatorLayout) view.findViewById(R.id.coordinator_layout);            checkout.signUp = (Button) view.findViewById(R.id.signUp);            checkout.firstName = (EditText) view.findViewById(R.id.firstName);            checkout.lastName = (EditText) view.findViewById(R.id.lastName);            checkout.signUpEmail = (EditText) view.findViewById(R.id.signup_email);            checkout.signUpPassword = (EditText) view.findViewById(R.id.signup_password);            checkout.retypePassword = (EditText) view.findViewById(R.id.retype_password);            checkout.telephone = (EditText) view.findViewById(R.id.telephone);            checkout.postCode = (EditText) view.findViewById(R.id.post_code);            checkout.city = (EditText) view.findViewById(R.id.city);            checkout.country = (TextView) view.findViewById(R.id.country);            String localename = this.getResources().getConfiguration().locale.getDisplayCountry();            checkout.country.setText(localename);            checkout.country.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    new MaterialDialog.Builder(getContext())                            .title(R.string.country)                            .items(R.array.country_array)                            .itemsCallbackSingleChoice(-1, new MaterialDialog.ListCallbackSingleChoice() {                                @Override                                public boolean onSelection(MaterialDialog dialog, View itemView, int which, CharSequence text) {                                    checkout.country.setText(text);                                    return true;                                }                            }).show();                }            });            checkout.signUpLayout.setOnTouchListener(new OnSwipeTouchListener(getActivity()) {                @Override                public void onSwipeDown() {                    if (checkout.signUpLayout.getVisibility() == View.VISIBLE) {                        checkout.hideSignUpAnimationView(checkout.signUpLayout);                    }                }                @Override                public void onSwipeLeft() {                }                @Override                public void onSwipeUp() {                }                @Override                public void onSwipeRight() {                }            });            checkout.createAccount.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    checkout.translateSignUpAnimationView(checkout.signUpLayout);                }            });            checkout.topParent.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    if (checkout.signUpLayout.getVisibility() == View.VISIBLE) {                        checkout.hideSignUpAnimationView(checkout.signUpLayout);                    }                }            });            checkout.login.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    login();                }            });            checkout.signUp.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    signUp();                }            });            return view;        }        private void login() {            if (new FormValidation().loginFormValidation(checkout.coordinatorLayout, checkout.email, checkout.password)) {                if (new ConnectionManager(getActivity()).isConnectedToInternet()) {                    final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());                    if (sharedPreferences.getString(SharedPrefrenceInfo.IS_USER_LOGGED_IN, "false").equals("false")) {                        final SweetAlertDialog pDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);                        pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));                        pDialog.setTitleText("Signing in");                        pDialog.setCancelable(true);                        pDialog.show();                        new Login(getActivity()).requestToken(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), checkout.email.getText().toString(), checkout.password.getText().toString(), new LoginInfoHolder() {                            @Override                            public void loginInfo(String success, String data) {                                if (success.equals("401")) {                                    pDialog.dismiss();                                    Utils.setTokenInfo(getActivity(), pDialog, new AccessTokenInfoHolder() {                                        @Override                                        public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                            login();                                        }                                    });                                } else {                                    if (success.equals("true")) {                                        try {                                            JSONObject jsonObject = new JSONObject(data);                                            String firstName = jsonObject.getString("firstname");                                            String lastname = jsonObject.getString("lastname");                                            String email = jsonObject.getString("email");                                            String telephone = jsonObject.getString("telephone");                                            pDialog.changeAlertType(SweetAlertDialog.SUCCESS_TYPE);                                            pDialog.dismissWithAnimation();                                            SharedPreferences.Editor editor = sharedPreferences.edit();                                            editor.putString(SharedPrefrenceInfo.IS_USER_LOGGED_IN, "true");                                            editor.putString(SharedPrefrenceInfo.FIRST_NAME, firstName);                                            editor.putString(SharedPrefrenceInfo.LAST_NAME, lastname);                                            editor.putString(SharedPrefrenceInfo.EMAIL, email);                                            editor.putString(SharedPrefrenceInfo.TELEPHONE, telephone);                                            editor.apply();                                        } catch (JSONException ex) {                                            ex.printStackTrace();                                        }                                        ((LoginAndSignUpMessageSender) getActivity()).setLoginAndSignUpMessage();                                    } else {                                        pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                                        pDialog.setTitleText("Invalid username and password");                                    }                                }                            }                        });                    }                } else {                    new SweetAlertDialog(getActivity(), SweetAlertDialog.ERROR_TYPE)                            .setTitleText("Oops...")                            .setContentText("No internet connection!")                            .show();                }            }        }        private void signUp() {            if (new FormValidation().signUpValidation(checkout.coordinatorLayout, checkout.firstName, checkout.lastName, checkout.signUpEmail, checkout.signUpPassword, checkout.retypePassword, checkout.telephone, checkout.postCode, checkout.city, checkout.country)) {                if (new ConnectionManager(getActivity()).isConnectedToInternet()) {                    final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());                    final SweetAlertDialog pDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);                    pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));                    pDialog.setTitleText("Signing up");                    pDialog.setCancelable(true);                    pDialog.show();                    new CreateUser(getActivity()).requestSignUp(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), checkout.firstName.getText().toString(), checkout.lastName.getText().toString(), checkout.signUpEmail.getText().toString(), checkout.signUpPassword.getText().toString(), checkout.retypePassword.getText().toString(), checkout.telephone.getText().toString(), checkout.postCode.getText().toString(), checkout.city.getText().toString(), checkout.country.getText().toString(), new JsonResponseHolder() {                        @Override                        public void onResponse(String status, String message) {                            switch (status) {                                case "true":                                    pDialog.changeAlertType(SweetAlertDialog.SUCCESS_TYPE);                                    checkout.signUpLayout.setVisibility(View.GONE);                                    ((LoginAndSignUpMessageSender) getActivity()).setLoginAndSignUpMessage();                                    break;                                case "false":                                    pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                                    pDialog.setTitleText(message);                                    break;                                case "401":                                    pDialog.dismiss();                                    Utils.setTokenInfo(getActivity(), pDialog, new AccessTokenInfoHolder() {                                        @Override                                        public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                            signUp();                                        }                                    });                                    break;                            }                        }                    });                } else {                    new SweetAlertDialog(getActivity(), SweetAlertDialog.ERROR_TYPE)                            .setTitleText("Oops...")                            .setContentText("No internet connection!")                            .show();                }            }        }    }    public static class BillingFragment extends Fragment {        Checkout checkout = new Checkout();        private AppCompatCheckBox appCompatCheckBox;        private boolean isChecked;        @Override        public void onCreate(@Nullable Bundle savedInstanceState) {            super.onCreate(savedInstanceState);            isChecked = getArguments().getBoolean("isChecked");        }        @Nullable        @Override        public View onCreateView(LayoutInflater inflater, @Nullable final ViewGroup container, @Nullable Bundle savedInstanceState) {            View view = inflater.inflate(R.layout.billing_checkout_fragment, container, false);            final ImageView existing = (ImageView) view.findViewById(R.id.existing);            final ImageView newAddress = (ImageView) view.findViewById(R.id.new_address);            RelativeLayout leftRectangularBackground = (RelativeLayout) view.findViewById(R.id.left_rectangular_background);            RelativeLayout rightRectangularBackground = (RelativeLayout) view.findViewById(R.id.right_rectangular_background);            checkout.billingFirstName = (EditText) view.findViewById(R.id.billing_first_name);            checkout.billingLastName = (EditText) view.findViewById(R.id.billing_last_name);            checkout.billingAddressOne = (EditText) view.findViewById(R.id.billing_address_one);            checkout.billingCity = (EditText) view.findViewById(R.id.billing_city);            checkout.billingPostCode = (EditText) view.findViewById(R.id.billing_postcode);            checkout.billingCountry = (EditText) view.findViewById(R.id.billing_country);            final Button continueButton = (Button) view.findViewById(R.id.continue_button);            appCompatCheckBox = (AppCompatCheckBox) view.findViewById(R.id.checkbox);            if (isChecked) {                appCompatCheckBox.setVisibility(View.VISIBLE);            } else {                appCompatCheckBox.setVisibility(View.GONE);            }            appCompatCheckBox.setSupportButtonTintList(                    ContextCompat.getColorStateList(getActivity(),                            R.color.colorPrimary));            continueButton.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    if (checkout.selectedAddress.equals("existing address")) {                        postPaymentAddress();                    } else {                        postNewPaymentAddress();                    }                }            });            existing.setColorFilter(Color.argb(255, 246, 109, 99));            leftRectangularBackground.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    checkout.selectedAddress = "existing address";                    getUserInformation();                    existing.setColorFilter(Color.argb(255, 246, 109, 99));                    newAddress.setColorFilter(Color.argb(0, 255, 255, 255));                }            });            rightRectangularBackground.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    checkout.selectedAddress = "new address";                    checkout.billingFirstName.setText("");                    checkout.billingLastName.setText("");                    checkout.billingAddressOne.setText("");                    checkout.billingCity.setText("");                    checkout.billingPostCode.setText("");                    checkout.billingCountry.setText("");                    checkout.billingFirstName.setEnabled(true);                    checkout.billingLastName.setEnabled(true);                    checkout.billingAddressOne.setEnabled(true);                    checkout.billingCity.setEnabled(true);                    checkout.billingPostCode.setEnabled(true);                    checkout.billingCountry.setEnabled(true);                    existing.setColorFilter(Color.argb(0, 255, 255, 255));                    newAddress.setColorFilter(Color.argb(255, 246, 109, 99));                }            });            LinearLayout topParent = (LinearLayout) view.findViewById(R.id.top_parent);            if (Homepage.isTablet(getActivity())) {                leftRectangularBackground.getLayoutParams().height = 320;                rightRectangularBackground.getLayoutParams().height = 320;                topParent.setPadding(40, 40, 40, 0);            }            getUserInformation();            return view;        }        private void getUserInformation() {            final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());            final SweetAlertDialog pDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);            pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));            pDialog.setTitleText("Collecting information");            pDialog.setCancelable(true);            pDialog.show();            new GetPaymentAddress(getActivity()).getpaymentAddress(isChecked, pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {                @Override                public void onResponse(String status, String message) {                    if (status.equals("401")) {                        pDialog.dismiss();                        Utils.setTokenInfo(getActivity(), pDialog, new AccessTokenInfoHolder() {                            @Override                            public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                getUserInformation();                            }                        });                    } else {                        if (status.equals("true")) {                            try {                                JSONObject jsonObject = new JSONObject(message);                                final JSONArray jsonArray = jsonObject.getJSONArray("addresses");                                if (jsonArray.length() == 1) {                                    for (int i = 0; i < jsonArray.length(); i++) {                                        JSONObject jsonObject1 = jsonArray.getJSONObject(i);                                        String firstName = jsonObject1.getString("firstname");                                        String lastname = jsonObject1.getString("lastname");                                        String address_1 = jsonObject1.getString("address_1");                                        String postcode = jsonObject1.getString("postcode");                                        String city = jsonObject1.getString("city");                                        String country = jsonObject1.getString("country");                                        checkout.addressId = jsonObject1.getString("address_id");                                        checkout.billingFirstName.setText(firstName);                                        checkout.billingLastName.setText(lastname);                                        checkout.billingAddressOne.setText(address_1);                                        checkout.billingCity.setText(city);                                        checkout.billingCountry.setText(country);                                        checkout.billingPostCode.setText(postcode);                                        checkout.billingFirstName.setEnabled(false);                                        checkout.billingLastName.setEnabled(false);                                        checkout.billingAddressOne.setEnabled(false);                                        checkout.billingCountry.setEnabled(false);                                        checkout.billingCity.setEnabled(false);                                        checkout.billingPostCode.setEnabled(false);                                        pDialog.dismissWithAnimation();                                    }                                } else {                                    //display dialog and show the addresses                                    pDialog.dismissWithAnimation();                                    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());                                    View view = View.inflate(getActivity(), R.layout.addresses_alert_dialog, null);                                    builder.setView(view);                                    ListView addressList = (ListView) view.findViewById(R.id.address_content);                                    List<String> addresses = new ArrayList<>();                                    for (int i = 0; i < jsonArray.length(); i++) {                                        JSONObject jsonObject1 = jsonArray.getJSONObject(i);                                        String addressOne = jsonObject1.getString("address_1");                                        if (!addressOne.equals("")) {                                            addresses.add(addressOne);                                        }                                    }                                    final AlertDialog alertDialog = builder.create();                                    final Button cancel = (Button) view.findViewById(R.id.cancel);                                    cancel.setOnClickListener(new View.OnClickListener() {                                        @Override                                        public void onClick(View v) {                                            alertDialog.dismiss();                                            checkout.billingFirstName.setEnabled(false);                                            checkout.billingLastName.setEnabled(false);                                            checkout.billingAddressOne.setEnabled(false);                                            checkout.billingCity.setEnabled(false);                                            checkout.billingPostCode.setEnabled(false);                                        }                                    });                                    addressList.setAdapter(new AddressListAdapter(getActivity(), addresses, new AdressSelectioIdentifier() {                                        @Override                                        public void onAddressSelected(String selectedAddress) {                                            alertDialog.dismiss();                                            for (int i = 0; i < jsonArray.length(); i++) {                                                try {                                                    JSONObject jsonObject1 = jsonArray.getJSONObject(i);                                                    checkout.addressId = jsonObject1.getString("address_id");                                                    String firstName = jsonObject1.getString("firstname");                                                    String lastname = jsonObject1.getString("lastname");                                                    String address_1 = jsonObject1.getString("address_1");                                                    String postcode = jsonObject1.getString("postcode");                                                    String city = jsonObject1.getString("city");                                                    if (selectedAddress.equals(address_1)) {                                                        checkout.billingFirstName.setText(firstName);                                                        checkout.billingLastName.setText(lastname);                                                        checkout.billingAddressOne.setText(address_1);                                                        checkout.billingCity.setText(city);                                                        checkout.billingPostCode.setText(postcode);                                                        checkout.billingFirstName.setEnabled(false);                                                        checkout.billingLastName.setEnabled(false);                                                        checkout.billingAddressOne.setEnabled(false);                                                        checkout.billingCity.setEnabled(false);                                                        checkout.billingPostCode.setEnabled(false);                                                        break;                                                    }                                                } catch (JSONException e) {                                                    e.printStackTrace();                                                }                                            }                                        }                                    }));                                    alertDialog.show();                                }                            } catch (JSONException e) {                                e.printStackTrace();                            }                        } else {                            pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                            pDialog.setTitleText(message);                        }                    }                }            });        }        private void postPaymentAddress() {            final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());            final SweetAlertDialog pDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);            pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));            pDialog.setTitleText("Sending payment address");            pDialog.setCancelable(true);            pDialog.show();            new PostPaymentAddress(getActivity()).postPaymentAddress(isChecked, pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), "existing", checkout.addressId, new ResponseInfoHolder() {                @Override                public void setFollowingInfo(String success, String data) {                    if (success.equals("401")) {                        pDialog.dismiss();                        Utils.setTokenInfo(getActivity(), pDialog, new AccessTokenInfoHolder() {                            @Override                            public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                postPaymentAddress();                            }                        });                    } else {                        if (success.equals("true")) {                            pDialog.dismissWithAnimation();                            ///////////////////////////////////////////////////////////////////////////////                            //post shipping adress if billing address checkbox is checked                            new PostPaymentAddress(getActivity()).postPaymentAddress(false, pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), "existing", checkout.addressId, new ResponseInfoHolder() {                                @Override                                public void setFollowingInfo(String success, String data) {                                    if (success.equals("401")) {                                        pDialog.dismiss();                                        Utils.setTokenInfo(getActivity(), pDialog, new AccessTokenInfoHolder() {                                            @Override                                            public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                                postPaymentAddress();                                            }                                        });                                    } else {                                        if (success.equals("true")) {                                            if (!isChecked) {                                                ((BillingValidator) getActivity()).onBillingValidation(true);                                            } else {                                                ((BillingValidator) getActivity()).onBillingValidation(appCompatCheckBox.isChecked());                                            }                                        } else {                                            pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                                            try {                                                JSONObject jsonObject = new JSONObject(data);                                                if (jsonObject.has("warning")) {                                                    String warning = jsonObject.getString("warning");                                                    pDialog.setTitleText(warning);                                                } else {                                                    pDialog.setTitleText(data);                                                }                                            } catch (JSONException e) {                                                e.printStackTrace();                                            }                                        }                                    }                                }                            });                            //////////////////////////////////////////////////////////////////////////////                        } else {                            pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                            try {                                JSONObject jsonObject = new JSONObject(data);                                if (jsonObject.has("warning")) {                                    String warning = jsonObject.getString("warning");                                    pDialog.setTitleText(warning);                                } else {                                    pDialog.setTitleText(data);                                }                            } catch (JSONException e) {                                pDialog.setTitleText(data);                            }                        }                    }                }            });        }        private void postNewPaymentAddress() {            final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());            final SweetAlertDialog pDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);            pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));            pDialog.setTitleText("Sending payment address");            pDialog.setCancelable(true);            pDialog.show();            if (checkout.billingFirstName.getText().toString().equals("")) {                pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                pDialog.setTitleText("First name required");            } else if (checkout.billingLastName.getText().toString().equals("")) {                pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                pDialog.setTitleText("Last name required");            } else if (checkout.billingAddressOne.getText().toString().equals("")) {                pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                pDialog.setTitleText("Address required");            } else if (checkout.billingCity.getText().toString().equals("")) {                pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                pDialog.setTitleText("City required");            } else if (checkout.billingPostCode.getText().toString().equals("")) {                pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                pDialog.setTitleText("Postcode required");            } else {                new PostNewPaymentAddress(getActivity()).postNewPaymentAddress(isChecked, pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), checkout.billingFirstName.getText().toString(),                        checkout.billingLastName.getText().toString(), checkout.billingAddressOne.getText().toString(), checkout.billingCity.getText().toString(), checkout.billingPostCode.getText().toString(), new ResponseInfoHolder() {                            @Override                            public void setFollowingInfo(String success, String data) {                                if (success.equals("true")) {                                    pDialog.dismissWithAnimation();                                    if (!isChecked) {                                        ((BillingValidator) getActivity()).onBillingValidation(true);                                    } else {                                        ((BillingValidator) getActivity()).onBillingValidation(appCompatCheckBox.isChecked());                                    }                                } else {                                    pDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                                    try {                                        JSONObject jsonObject = new JSONObject(data);                                        if (jsonObject.has("warning")) {                                            String warning = jsonObject.getString("warning");                                            pDialog.setTitleText(warning);                                        } else {                                            pDialog.setTitleText(data);                                        }                                    } catch (JSONException e) {                                        pDialog.setTitleText(data);                                    }                                }                            }                        });            }        }    }    public static class ShippingFragment extends Fragment {        Checkout checkout = new Checkout();        @Nullable        @Override        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {            View view = inflater.inflate(R.layout.shipping_checkout_fragment, container, false);            checkout.subTotal = (TextView) view.findViewById(R.id.sub_total);            checkout.shipping = (TextView) view.findViewById(R.id.shipping);            checkout.total = (TextView) view.findViewById(R.id.total);            checkout.coupon = (TextView) view.findViewById(R.id.coupon);            checkout.couponPrice = (TextView) view.findViewById(R.id.coupon_price);            checkout.formattedTotal = (TextView) view.findViewById(R.id.formatted_total);            checkout.formattedSubTotal = (TextView) view.findViewById(R.id.sub_total_formatted);            checkout.formattedShipping = (TextView) view.findViewById(R.id.formatted_shipping);            checkout.expandableListView = (ExpandableListView) view.findViewById(R.id.expandable_listview);            checkout.expandableListView.setOnGroupCollapseListener(new ExpandableListView.OnGroupCollapseListener() {                @Override                public void onGroupCollapse(int groupPosition) {                    checkout.expandableListView.expandGroup(groupPosition);                }            });            Button continueButton = (Button) view.findViewById(R.id.continue_button);            continueButton.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    if (checkout.listDataHeader != null && checkout.listDataHeader.size() > 0) {                        if (checkout.shippingCount == checkout.listDataHeader.size()) {                            ((ShippingValidator) getActivity()).onShippingValidation(checkout.subTotalValue, checkout.shippingValue, checkout.totalValue, checkout.couponVlaue, checkout.couponTitleValue);                        } else {                            SweetAlertDialog pDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.WARNING_TYPE);                            pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));                            pDialog.setTitleText("Please select one preferred shipping method for each brand");                            pDialog.setCancelable(true);                            pDialog.show();                        }                    }                }            });            prepareListAdapter();            checkout.subTotal.setText(Html.fromHtml("Subtotal<sub><small><i><font color='#d3d3d3'>(SGD)</font></i><small></sub>"));            checkout.shipping.setText(Html.fromHtml("Shipping<sub><small><i><font color='#d3d3d3'>(SGD)</font></i><small></sub>"));            checkout.total.setText(Html.fromHtml("TOTAL<sub><small><i><font color='#d3d3d3'>(SGD)</font></i><small></sub>"));            return view;        }        private void prepareListAdapter() {            final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());            final SweetAlertDialog pDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);            pDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));            pDialog.setTitleText("Collecting information");            pDialog.setCancelable(true);            pDialog.show();            new GetShippingMethod(getActivity()).getShippingMethod(pDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {                @Override                public void onResponse(String status, String total) {                    if (status.equals("401")) {                        pDialog.dismiss();                        Utils.setTokenInfo(getActivity(), pDialog, new AccessTokenInfoHolder() {                            @Override                            public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                prepareListAdapter();                            }                        });                    } else {                        pDialog.dismissWithAnimation();                        try {                            //count number of key in the given json                            JSONObject jsonObject = new JSONObject(status);                            double couponPrice = 0;                            String coupon = jsonObject.getString("coupon");                            if (!coupon.equals("")) {                                checkout.coupon.setText("Promo Code");                            }                            JSONArray totalJsonArray = new JSONArray(jsonObject.getString("totals"));                            for (int l = 0; l < totalJsonArray.length(); l++) {                                JSONObject totalJsonObject = totalJsonArray.getJSONObject(l);                                String code = totalJsonObject.getString("code");                                switch (code) {                                    case "sub_total":                                        String subTotalText = totalJsonObject.getString("text");                                        checkout.formattedSubTotal.setText(subTotalText);                                        break;                                    case "total":                                        String totalText = totalJsonObject.getString("text");                                        checkout.formattedTotal.setText(totalText);                                        break;                                    case "coupon":                                        String couponText = totalJsonObject.getString("text");                                        checkout.couponTitleValue =totalJsonObject.getString("title");                                        couponPrice =couponPrice+Double.parseDouble(couponText.replaceAll("[^\\d.]+|\\.(?!\\d)", ""));                                        checkout.couponPrice.setText(String.format("S$%s", String.valueOf(couponPrice)));                                        break;                                }                            }                            //three in the below number indicates total,total formatted and success                            int shopCount = jsonObject.names().length() - 4;                            checkout.listDataHeader = new ArrayList<>();                            Map<String, List<ShippingModel>> shippingMap = new HashMap<>();                            for (int i = 0; i < shopCount; i++) {                                String count = jsonObject.getString(String.valueOf(i));                                JSONObject jsonObject1 = new JSONObject(count);                                String sellerName = jsonObject1.getString("seller_name");                                String sellerId = jsonObject1.getString("seller_id");                                String products = jsonObject1.getString("products");                                ShippingInnerModel shippingInnerModel = new ShippingInnerModel();                                shippingInnerModel.setSellerName(sellerName);                                shippingInnerModel.setSellerId(sellerId);                                checkout.listDataHeader.add(shippingInnerModel);                                JSONArray jsonArray = new JSONArray(products);                                //store the total price of the group of product into this variable                                double totalPrice = 0.0;                                List<ShippingProductModel> productModels = new ArrayList<>();                                for (int j = 0; j < jsonArray.length(); j++) {                                    ShippingProductModel shippingProductModel = new ShippingProductModel();                                    JSONObject jsonObject2 = jsonArray.getJSONObject(j);                                    String productId = jsonObject2.getString("product_id");                                    String name = jsonObject2.getString("name");                                    String quantity = jsonObject2.getString("quantity");                                    String price = jsonObject2.getString("price");                                    totalPrice = totalPrice + Double.parseDouble(price.replaceAll("[^\\d.]+|\\.(?!\\d)", ""));                                    String productTotal = jsonObject2.getString("total");                                    String option = jsonObject2.getString("option");                                    JSONArray optionArray = new JSONArray(option);                                    for (int k = 0; k < optionArray.length(); k++) {                                        JSONObject optionJsonObject = optionArray.getJSONObject(k);                                        String optionName = optionJsonObject.getString("name");                                        if (optionName.equals("Size")) {                                            String sizeValue = optionJsonObject.getString("value");                                            shippingProductModel.setSize(sizeValue);                                        }                                        if (optionName.equals("Color")) {                                            String colorValue = optionJsonObject.getString("value");                                            shippingProductModel.setColor(colorValue);                                        }                                    }                                    shippingProductModel.setProductId(productId);                                    shippingProductModel.setProductName(name);                                    shippingProductModel.setQuantity(quantity);                                    shippingProductModel.setPrice(price);                                    shippingProductModel.setTotal(productTotal);                                    shippingProductModel.setShippingBackgroundEnabled(true);                                    productModels.add(shippingProductModel);                                }                                ShippingProductModel shippingProductModel1 = new ShippingProductModel();                                shippingProductModel1.setShippingMethod("Select Shipping Method");                                shippingProductModel1.setShippingBackgroundEnabled(true);                                shippingProductModel1.setTotalPrice(String.format("%.2f", totalPrice));                                productModels.add(shippingProductModel1);                                checkout.listDataChild.put(shippingInnerModel, productModels);                                //hashmap that store information of shipping methods                                String shippingMethod = jsonObject1.getString("shipping_method");                                JSONArray shippingArray = new JSONArray(shippingMethod);                                List<ShippingModel> shippingModelList = new ArrayList<>();                                for (int k = 0; k < shippingArray.length(); k++) {                                    ShippingModel shippingModel = new ShippingModel();                                    JSONObject jsonObject2 = shippingArray.getJSONObject(k);                                    String shippingMethodId = jsonObject2.getString("shipping_method_id");                                    String methodDescriptions = jsonObject2.getString("method_descriptions");                                    String cost = jsonObject2.getString("cost");                                    String unformattedCost = jsonObject2.getString("cost_unformatted");                                    shippingModel.setShippingMethodId(shippingMethodId);                                    shippingModel.setMethodDiscriptions(methodDescriptions);                                    shippingModel.setCost(cost);                                    shippingModel.setCostUnformatted(unformattedCost);                                    shippingModelList.add(shippingModel);                                }                                shippingMap.put(sellerId, shippingModelList);                            }                            final double finalCouponPrice = couponPrice;                            final double finalCouponPrice1 = couponPrice;                            ExpandableListViewAdapter expandableListViewAdapter = new ExpandableListViewAdapter(getActivity(), shippingMap, checkout.listDataHeader, checkout.listDataChild, new ShippingInfoDataHolder() {                                @Override                                public void setShippingInfoDataHolder(Map<Integer, Double> map, Button button) {                                    double sum = 0;                                    for (Integer key : map.keySet()) {                                        sum = sum + map.get(key);                                    }                                    checkout.formattedShipping.setText(String.format("S$%.2f", sum));                                    checkout.subTotalValue = Double.parseDouble(checkout.formattedSubTotal.getText().toString().replaceAll("[^\\d.]+|\\.(?!\\d)", ""));                                    checkout.shippingValue = sum;                                    checkout.couponVlaue = finalCouponPrice1;                                    checkout.totalValue = checkout.shippingValue + checkout.subTotalValue - finalCouponPrice;                                    checkout.formattedTotal.setText(String.format("S$%.2f", checkout.totalValue));                                    if (button.getBackground() != null) {                                        checkout.shippingCount++;                                    }                                }                            });                            checkout.expandableListView.setAdapter(expandableListViewAdapter);                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                }            });            checkout.listDataChild = new CustomHashMap<>();        }    }    public static class CompleteFragment extends Fragment {        final Checkout checkout = new Checkout();        private double subTotal, shipping, total, coupon;        private Button completeOrderButton;        @Override        public void onCreate(@Nullable Bundle savedInstanceState) {            super.onCreate(savedInstanceState);            subTotal = getArguments().getDouble("subTotal");            shipping = getArguments().getDouble("shipping");            total = getArguments().getDouble("total");            coupon = getArguments().getDouble("coupon");        }        @Nullable        @Override        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {            View view = inflater.inflate(R.layout.complete_checkout_fragment, container, false);            checkout.subTotal = (TextView) view.findViewById(R.id.sub_total);            checkout.shipping = (TextView) view.findViewById(R.id.shipping);            checkout.total = (TextView) view.findViewById(R.id.total);            checkout.coupon = (TextView) view.findViewById(R.id.coupon);            checkout.couponPrice = (TextView) view.findViewById(R.id.coupon_price);            checkout.formattedSubTotal = (TextView) view.findViewById(R.id.formatted_subtotal);            checkout.formattedShipping = (TextView) view.findViewById(R.id.formatted_shipping);            checkout.formattedTotal = (TextView) view.findViewById(R.id.formatted_total);            completeOrderButton = (Button) view.findViewById(R.id.complete_order_button);            checkout.formattedSubTotal.setText(String.format("S$%.2f", subTotal));            checkout.formattedShipping.setText(String.format("S$%.2f", shipping));            checkout.formattedTotal.setText(String.format("S$%.2f", total));            checkout.couponPrice.setText(String.format("S$%.2f", coupon));            checkout.coupon.setText("Promo Code");            checkout.subTotal.setText(Html.fromHtml("Subtotal<sub><small><i><font color='#d3d3d3'>(SGD)</font></i><small></sub>"));            checkout.shipping.setText(Html.fromHtml("Shipping<sub><small><i><font color='#d3d3d3'>(SGD)</font></i><small></sub>"));            checkout.total.setText(Html.fromHtml("TOTAL<sub><small><i><font color='#d3d3d3'>(SGD)</font></i><small></sub>"));            checkout.completeRecyclerList = (RecyclerView) view.findViewById(R.id.complete_list);            checkout.completeRecyclerList.setLayoutManager(new LinearLayoutManager(getActivity()));            checkout.completeRecyclerList.setHasFixedSize(false);            setCartData();            completeOrderButton.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    //call for confirm api                    final SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);                    sweetAlertDialog.setTitleText("Loading data");                    sweetAlertDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));                    sweetAlertDialog.show();                    final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());                    new CompletePaymentAddress(getActivity()).postCompletePaymentAddress(sweetAlertDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new ResponseInfoHolder() {                        @Override                        public void setFollowingInfo(String success, String data) {                            if (success.equals("true")) {                                new Confirm(getActivity()).postConfirm(sweetAlertDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new ResponseInfoHolder() {                                    @Override                                    public void setFollowingInfo(String success, String data) {                                        if (success.equals("true")) {                                            new GetPaypalToken(getActivity()).getPaypalToken(sweetAlertDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {                                                @Override                                                public void onResponse(String status, final String message) {                                                    if (status.equals("true")) {                                                        try {                                                            JSONObject jsonObject = new JSONObject(message);                                                            final String clientToken = jsonObject.getString("clientToken");                                                            sweetAlertDialog.dismissWithAnimation();                                                            sweetAlertDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {                                                                @Override                                                                public void onDismiss(DialogInterface dialog) {                                                                    PaymentRequest paymentRequest = new PaymentRequest()                                                                            .clientToken(clientToken);                                                                    startActivityForResult(paymentRequest.getIntent(getActivity()), 100);                                                                }                                                            });                                                        } catch (JSONException ex) {                                                            ex.printStackTrace();                                                        }                                                    }                                                }                                            });                                        } else {                                            sweetAlertDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                                            sweetAlertDialog.setTitleText(data);                                        }                                    }                                });                            } else {                                sweetAlertDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                                sweetAlertDialog.setTitleText(data);                            }                        }                    });                }            });            return view;        }        @Override        public void onActivityResult(int requestCode, int resultCode, Intent data) {            if (requestCode == 100) {                if (resultCode == Activity.RESULT_OK) {                    PaymentMethodNonce paymentMethodNonce = data.getParcelableExtra(                            BraintreePaymentActivity.EXTRA_PAYMENT_METHOD_NONCE                    );                    String nonce = paymentMethodNonce.getNonce();                    sendNonceKey(nonce);                }            }        }        private void sendNonceKey(final String nonce) {            //sending this nonce key to server            final SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);            sweetAlertDialog.setTitleText("Completing payment");            sweetAlertDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));            sweetAlertDialog.show();            final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());            new PostNonceToken(getActivity()).sendNonceToken(sweetAlertDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), nonce, new JsonResponseHolder() {                @Override                public void onResponse(String status, String message) {                    if (status.equals("401")) {                        Utils.setTokenInfo(getActivity(), sweetAlertDialog, new AccessTokenInfoHolder() {                            @Override                            public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                sweetAlertDialog.dismissWithAnimation();                                sendNonceKey(nonce);                            }                        });                    } else {                        if (status.equals("true")) {                            sweetAlertDialog.dismissWithAnimation();                            sweetAlertDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {                                @Override                                public void onDismiss(DialogInterface dialog) {                                    Intent intent = new Intent(getActivity(), PaymentSuccess.class);                                    startActivity(intent);                                }                            });                        } else {                            sweetAlertDialog.changeAlertType(SweetAlertDialog.ERROR_TYPE);                            sweetAlertDialog.setTitleText(message);                        }                    }                }            });        }        private void prepareCartList(String data) {            try {                JSONObject jsonObject = new JSONObject(data);                List<com.fashion.binge.fashiondesign.models.GetCartData> cartDataList = new ArrayList<>();                String products = jsonObject.getString("products");                JSONArray jsonArray = new JSONArray(products);                for (int i = 0; i < jsonArray.length(); i++) {                    com.fashion.binge.fashiondesign.models.GetCartData getCartData = new com.fashion.binge.fashiondesign.models.GetCartData();                    JSONObject jsonObject1 = jsonArray.getJSONObject(i);                    String key = jsonObject1.getString("key");                    String thumb = jsonObject1.getString("thumb");                    String name = jsonObject1.getString("name");                    String model = jsonObject1.getString("model");                    String quantity = jsonObject1.getString("quantity");                    String stock = jsonObject1.getString("stock");                    String reward = jsonObject1.getString("reward");                    String price = jsonObject1.getString("price");                    String total = jsonObject1.getString("total");                    String productId = jsonObject1.getString("product_id");                    JSONArray jsonArray1 = new JSONArray(jsonObject1.getString("option"));                    for (int j = 0; j < jsonArray1.length(); j++) {                        JSONObject jsonObject2 = jsonArray1.getJSONObject(j);                        String optionName = jsonObject2.getString("name");                        if (optionName.equals("Size")) {                            String size = jsonObject2.getString("value");                            getCartData.setSize(size);                        } else if (optionName.equals("Color")) {                            String color = jsonObject2.getString("value");                            getCartData.setColor(color);                        }                    }                    getCartData.setKey(key);                    getCartData.setThumb(thumb);                    getCartData.setName(name);                    getCartData.setModel(model);                    getCartData.setQuantity(quantity);                    getCartData.setStock(stock);                    getCartData.setRewardStatus(reward);                    getCartData.setPrice(price);                    getCartData.setTotal(total);                    getCartData.setProductId(productId);                    cartDataList.add(getCartData);                }                checkout.completeRecyclerList.setAdapter(new CompleteRecyclerAdapter(getActivity(), cartDataList));            } catch (JSONException e) {                e.printStackTrace();            }        }        private void setCartData() {            final SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(getActivity(), SweetAlertDialog.PROGRESS_TYPE);            sweetAlertDialog.setTitleText("Loading data");            sweetAlertDialog.getProgressHelper().setBarColor(Color.parseColor("#F6705E"));            sweetAlertDialog.show();            final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());            //call for the complete api first            new CompletePaymentAddress(getActivity()).getCompletePaymentAddress(sweetAlertDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new ResponseInfoHolder() {                @Override                public void setFollowingInfo(String success, String data) {                    if (success.equals("401")) {                        sweetAlertDialog.dismissWithAnimation();                        Utils.setTokenInfo(getActivity(), sweetAlertDialog, new AccessTokenInfoHolder() {                            @Override                            public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                setCartData();                            }                        });                    } else {                        if (success.equals("true")) {                            new GetCartData(getActivity()).getCartDatas(sweetAlertDialog, sharedPreferences.getString(SharedPrefrenceInfo.TOKEN_TYPE, "") + " " + sharedPreferences.getString(SharedPrefrenceInfo.IS_TOKEN_VALID, ""), new JsonResponseHolder() {                                @Override                                public void onResponse(String status, String message) {                                    if (status.equals("401")) {                                        sweetAlertDialog.dismissWithAnimation();                                        Utils.setTokenInfo(getActivity(), sweetAlertDialog, new AccessTokenInfoHolder() {                                            @Override                                            public void setAcessTokenInfo(String accessToken, String expires_in, String token_type) {                                                setCartData();                                            }                                        });                                    } else {                                        if (status.equals("true")) {                                            prepareCartList(message);                                            sweetAlertDialog.dismissWithAnimation();                                        } else if (status.equals("false")) {                                            sweetAlertDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                                            sweetAlertDialog.setTitleText(message);                                        }                                    }                                }                            });                        } else if (success.equals("false")) {                            sweetAlertDialog.changeAlertType(SweetAlertDialog.WARNING_TYPE);                            try {                                JSONObject jsonObject = new JSONObject(data);                                if (jsonObject.has("warning")) {                                    String warning = jsonObject.getString("warning");                                    sweetAlertDialog.setTitleText(warning);                                } else {                                    sweetAlertDialog.setTitleText(data);                                }                            } catch (JSONException e) {                                e.printStackTrace();                            }                        }                    }                }            });        }    }}